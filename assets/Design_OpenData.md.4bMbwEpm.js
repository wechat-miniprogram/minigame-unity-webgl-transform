import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Br2U662V.js";const t="/minigame-unity-webgl-transform/assets/opendataframework.2OxzAkk1.png",h="/minigame-unity-webgl-transform/assets/o2.BiHxPfHa.png",e="/minigame-unity-webgl-transform/assets/opendata.BgWhdjkg.png",l="/minigame-unity-webgl-transform/assets/demo1.BsKsD89o.jpeg",p="/minigame-unity-webgl-transform/assets/demo2.ByJUMFjf.jpeg",k="/minigame-unity-webgl-transform/assets/demo3.Bj8Y-kOy.jpeg",r="/minigame-unity-webgl-transform/assets/demo6.BEnu5duc.jpeg",d="/minigame-unity-webgl-transform/assets/demo7.BJ_h8aov.jpeg",E="/minigame-unity-webgl-transform/assets/demo4.D7PXjFbO.jpeg",g="/minigame-unity-webgl-transform/assets/demo5.jD5F1kVF.jpeg",B=JSON.parse('{"title":"Unity中如何展示排行榜这类微信关系数据","description":"","frontmatter":{},"headers":[],"relativePath":"Design/OpenData.md","filePath":"Design/OpenData.md"}'),o={name:"Design/OpenData.md"},y=n('<h1 id="unity中如何展示排行榜这类微信关系数据" tabindex="-1">Unity中如何展示排行榜这类微信关系数据 <a class="header-anchor" href="#unity中如何展示排行榜这类微信关系数据" aria-label="Permalink to &quot;Unity中如何展示排行榜这类微信关系数据&quot;">​</a></h1><h2 id="背景和原理介绍" tabindex="-1">背景和原理介绍 <a class="header-anchor" href="#背景和原理介绍" aria-label="Permalink to &quot;背景和原理介绍&quot;">​</a></h2><p>小游戏提供了<a href="https://developers.weixin.qq.com/minigame/dev/api/open-api/data/wx.shareMessageToFriend.html" target="_blank" rel="noreferrer">一系列接口</a>获取好友关系链数据，为了安全，绝大部分接口都只能在<a href="https://developers.weixin.qq.com/minigame/dev/guide/open-ability/opendata/basic.html" target="_blank" rel="noreferrer">开放数据域</a>内调用。</p><p><img src="'+t+`" alt="avatar"></p><p>开放数据域虽然乍一看有点复杂，但只需要核心理解几个点即可：</p><ol><li>开放数据域所有逻辑都在一个独立的文件夹内完成，它核心处理两件事：调用关系链接口拉好友数据和将数据绘制到 sharedCanvas；</li><li>开放数据域接触到的 sharedCanvas 是一个离屏的 canvas，它完全不理解自己最终是怎么被绘制到屏幕上的；</li><li>主域（其实就是开放数据域文件夹外的业务代码）同样能接触 sharedCanvas，一般是通过 sharedCanvas 创建精灵添加到游戏场景；</li><li>数据的通信<strong>一定是单向的</strong>，只能从主域流向开放数据域，主域无法感知到开放数据域发生了什么；</li><li>鉴于第4点，主域要更新 sharedCanvas 只能定期刷新纹理来实现同步开放数据域的变化；</li></ol><p>Unity 里面要实现 sharedCanvas 的绘制，核心在于 hook Unity 的渲染，完整的原理为：</p><ol><li>Unity 侧有个占位的纹理；</li><li>Unity WebGL 模式下这个占位纹理会对应有一个 WebGLObject，Unity 会调用 drawElements API 绘制到 canvas；</li><li>在需要绘制排行榜的时候，将原本要绘制的 WebGLObject 替换成通过 sharedCanvas 创建而来的 WebGLObject；</li><li>在关闭排行榜的时候，停止步骤 3 的 hook；</li></ol><p><strong>重点更新：</strong><strong>我们在基础库3.6.6版本支持了 ScreenCanvas 模式的开放数据域</strong></p><ul><li>区别：sharedCanvas 变成了在屏模式（ScreenCanvas），不再需要依赖游戏域循环刷新渲染</li><li>好处：减少由于渲染离屏Canvas产生的干扰问题</li><li>如何实现：</li></ul><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetOpenDataContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataContextOption</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sharedCanvasMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CanvasType.ScreenCanvas</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="详细步骤" tabindex="-1">详细步骤 <a class="header-anchor" href="#详细步骤" aria-label="Permalink to &quot;详细步骤&quot;">​</a></h2><h3 id="_1、设置占位纹理" tabindex="-1">1、设置占位纹理 <a class="header-anchor" href="#_1、设置占位纹理" aria-label="Permalink to &quot;1、设置占位纹理&quot;">​</a></h3><p>在游戏需要展示的地方创建一个 RawImage，其中 Texture 属性自己选择透明的图片即可，后续展示时会被动态替换。因为unity纹理与 Web 的绘制存在倒立的差异，请将先将 rotation的x 设置为180，即让 <code>UI控件延X轴旋转180度</code> 再调整到游戏中合适的位置,如下图</p><p><img src="`+h+`" alt="avatar"></p><h3 id="_2、调用sdk的api" tabindex="-1">2、调用SDK的API <a class="header-anchor" href="#_2、调用sdk的api" aria-label="Permalink to &quot;2、调用SDK的API&quot;">​</a></h3><h4 id="_2-1-先初始化开放数据域类型" tabindex="-1">2.1 先初始化开放数据域类型 <a class="header-anchor" href="#_2-1-先初始化开放数据域类型" aria-label="Permalink to &quot;2.1 先初始化开放数据域类型&quot;">​</a></h4><p>初始化后canvas类型无法修改，只初始化一次并保存即可</p><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitOpenDataContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (openDataContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    WXOpenDataContext</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openDataContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetOpenDataContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataContextOption</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sharedCanvasMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedCanvasType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>CanvasType</code>有<code>OffScreenCanvas</code>和<code>ScreenCanvas</code>两种类型，<code>OffScreenCanvas</code>为旧版本，推荐使用<code>ScreenCanvas</code></p><h4 id="_2-2-通过-postmessage-向开放数据域传递消息" tabindex="-1">2.2 通过 PostMessage 向开放数据域传递消息 <a class="header-anchor" href="#_2-2-通过-postmessage-向开放数据域传递消息" aria-label="Permalink to &quot;2.2 通过 PostMessage 向开放数据域传递消息&quot;">​</a></h4><p>如果需要在 Unity 中向开放域页面传递数据，可以调用<code>openDataContext.PostMessage</code>，如下代码：</p><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataMessage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // type 用于表明时间类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenDataMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msgData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msgData.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;showFriendsRank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonUtility.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msgData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">openDataContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PostMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span></code></pre></div><p>开放数据域JS代码可以按照以下实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[WX OpenData] onMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[WX OpenData] onMessage data is not a object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (data.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;showFriendsRank&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行好友排行榜渲染</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="_2-3-在需要展示的地方调用-wx-showopendata" tabindex="-1">2.3 在需要展示的地方调用，<code>WX.ShowOpenData</code> <a class="header-anchor" href="#_2-3-在需要展示的地方调用-wx-showopendata" aria-label="Permalink to &quot;2.3 在需要展示的地方调用，\`WX.ShowOpenData\`&quot;">​</a></h4><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShowOpenData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rawImage.texture, x, y, width, height);</span></span></code></pre></div><p>其中 :</p><ul><li>x : 占位区域对应屏幕左上角横坐标</li><li>y : 占位区域对应屏幕左上角纵坐标，注意左上角为（0，0）</li><li>width : 占位区域对应的宽度</li><li>height : 占位区域对应的高度</li></ul><p>WX.ShowOpenData 最终会调用 minigame/unity-sdk/open-data.js 内的 WXShowOpenData 方法，核心是三个作用：</p><ol><li>调用 wx.getOpenDataContext，这会触发开放数据域的初始化，也就是 open-data 文件夹下的代码在开放数据域初始化之后才能够执行；</li><li>给开放数据域侧抛一个事件，告知开放域去执行数据拉取和渲染操作，对于 WXRender 的处理没有任何要求，开放数据域甚至可以忽略这个事件；</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意，该代码是Unity模板中的代码，无需开发者实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">openDataContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WXRender&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: x,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: y,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    width: width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height: height,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devicePixelRatio: window.devicePixelRatio,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="3"><li>如果是<code>OffScreenCanvas</code>模式，则会开始 hook Unity 的渲染，原本的 RawImage 就会被替换成 sharedCanvas 的纹理。如果是<code>ScreenCanvas</code>模式，则会修改宽高并直接在屏渲染</li></ol><h4 id="_2-4-需要关闭开放数据域时则调用-wx-hideopendata" tabindex="-1">2.4 需要关闭开放数据域时则调用，<code>WX.HideOpenData</code> <a class="header-anchor" href="#_2-4-需要关闭开放数据域时则调用-wx-hideopendata" aria-label="Permalink to &quot;2.4 需要关闭开放数据域时则调用，\`WX.HideOpenData\`&quot;">​</a></h4><p>如果是<code>OffScreenCanvas</code>模式，这一步非常重要，如果仅仅在 Unity 侧隐藏了 RawImage 而没有调用 WX.HideOpenData，很可能导致排行榜关闭之后纹理错乱，比如有些地方的纹理变成了排行榜对应的纹理。</p><h3 id="_3、导出选项勾选使用好友关系链" tabindex="-1">3、导出选项勾选使用好友关系链 <a class="header-anchor" href="#_3、导出选项勾选使用好友关系链" aria-label="Permalink to &quot;3、导出选项勾选使用好友关系链&quot;">​</a></h3><p>这一步会做两个事情：</p><ol><li>game.json 会声明使用开放数据域；</li><li>将插件内置的 open-data 示例拷贝至 minigame 目录，请注意做好文件备份；</li></ol><p><img src="`+e+`" alt="avatar"></p><h3 id="_4、用js开发排行榜这类微信关系逻辑" tabindex="-1">4、用JS开发排行榜这类微信关系逻辑 <a class="header-anchor" href="#_4、用js开发排行榜这类微信关系逻辑" aria-label="Permalink to &quot;4、用JS开发排行榜这类微信关系逻辑&quot;">​</a></h3><p>开放数据域的开发和普通小游戏并无区别，暂时只能通过 js 来开发，对技术选型并无要求，可以不依赖任何引擎调用 Canvas2D API 执行渲染，但如果需要事件点击、滚动列表等处理，就会显得很麻烦；也可以选择完整的 JS 游戏引擎比如 Cocos，但这会使得代码包明显增大进而影响启动速度。</p><p>因此插件内置的示例采用的是微信自研的<a href="https://wechat-miniprogram.github.io/minigame-canvas-engine/" target="_blank" rel="noreferrer">轻量级渲染引擎</a>，压缩后只有几十k，这需要你掌握一些简单的 Web 开发知识，包括 <a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">Flex布局</a>、<a href="https://www.w3schools.com/css/" target="_blank" rel="noreferrer">CSS</a>，参照示例修修改改很快能够上手。</p><h3 id="_5、示例demo" tabindex="-1">5、示例DEMO <a class="header-anchor" href="#_5、示例demo" aria-label="Permalink to &quot;5、示例DEMO&quot;">​</a></h3><p>可以参考<a href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/tree/main/Demo/Ranking" target="_blank" rel="noreferrer">Demo/Ranking</a>下面的Unity工程。插件导出的 open-data 已经是一个比较功能完备的工程，进行简单的魔改就能够满足需求。</p><h4 id="_5-1-好友排行榜" tabindex="-1">5.1 好友排行榜 <a class="header-anchor" href="#_5-1-好友排行榜" aria-label="Permalink to &quot;5.1 好友排行榜&quot;">​</a></h4><ol><li>展示 RawImage 的时候调用 SDK API</li></ol><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShowOpenData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RankMask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetActive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RankingBox.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetActive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 注意这里传x,y,width,height是为了点击区域能正确点击，x,y 是距离屏幕左上角的距离，宽度传 (int)RankBody.rectTransform.rect.width是在canvas的UI Scale Mode为 Constant Pixel Size的情况下设置的。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 如果父元素占满整个窗口的话，pivot 设置为（0，0），rotation设置为180，则左上角就是离屏幕的距离</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 注意这里传x,y,width,height是为了点击区域能正确点击，因为开放数据域并不是使用 Unity 进行渲染而是可以选择任意第三方渲染引擎</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 所以开放数据域名要正确处理好事件处理，就需要明确告诉开放数据域，排行榜所在的纹理绘制在屏幕中的物理坐标系</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 比如 iPhone Xs Max 的物理尺寸是 414 * 896，如果排行榜被绘制在屏幕中央且物理尺寸为 200 * 200，那么这里的 x,y,width,height应当是 107,348,200,200</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * x,y 是距离屏幕左上角的距离，宽度传 (int)RankBody.rectTransform.rect.width是在canvas的UI Scale Mode为 Constant Pixel Size的情况下设置的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 如果是Scale With Screen Size，且设置为以宽度作为缩放，则要这要做一下换算，比如canavs宽度为960，rawImage设置为200 则需要根据 referenceResolution 做一些换算</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 不过不管是什么屏幕适配模式，这里的目的就是为了算出 RawImage 在屏幕中绝对的位置和尺寸</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  CanvasScaler</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scaler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CanvasScaler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> referenceResolution</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scaler.referenceResolution;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RankBody.transform.position;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShowOpenData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RankBody.texture, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)p.x, Screen.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)p.y, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)((Screen.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> referenceResolution.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RankBody.rectTransform.rect.width), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)((Screen.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> referenceResolution.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RankBody.rectTransform.rect.height));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>发送事件给开放数据域，要求展示好友排行榜</li></ol><div class="language-Csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenDataMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msgData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msgData.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;showFriendsRank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonUtility.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msgData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">openDataContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PostMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span></code></pre></div><ol start="3"><li>开放数据域监听相应事件，展示群排行，详见 open-data。</li></ol><p>整体流程示意：</p><p><img src="`+l+'" width="30%"> <img src="'+p+'" width="30%"> <img src="'+k+`" width="30%"></p><h4 id="_5-2-群好友排行榜" tabindex="-1">5.2 群好友排行榜 <a class="header-anchor" href="#_5-2-群好友排行榜" aria-label="Permalink to &quot;5.2 群好友排行榜&quot;">​</a></h4><ol><li>为了使用群排行榜，需要调用 WX.UpdateShareMenu 设置分享菜单</li></ol><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * 使用群排行功能需要特殊设置分享功能，详情可见链接</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * https://developers.weixin.qq.com/minigame/dev/guide/open-ability/share/share.html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UpdateShareMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UpdateShareMenuOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    withShareTicket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isPrivateMessage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="2"><li>在分享时，带上相关query</li></ol><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShareAppMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShareAppMessageOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;最强战力排行榜！谁是第一？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;minigame_action=show_group_list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    imageUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://mmgame.qpic.cn/image/5f9144af9f0e32d50fb878e5256d669fa1ae6fdec77550849bfee137be995d18/0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="3"><li>监听 WX.OnShow 回调，给开放数据域发消息要求展示群排行</li></ol><div class="language-CSharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnShowCallbackResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shareTicket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.shareTicket;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.query;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsNullOrEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shareTicket) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;minigame_action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;show_group_list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        InitOpenDataContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ShowOpenData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OpenDataMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msgData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenDataMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        msgData.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;showGroupFriendsRank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        msgData.shareTicket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shareTicket;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonUtility.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msgData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        openDataContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PostMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="4"><li>开放数据域监听相应事件，展示群排行，详见 open-data。</li></ol><p>整体流程示意：</p><p><img src="`+r+'" width="24%"> <img src="'+d+'" width="24%"> <img src="'+E+'" width="24%"> <img src="'+g+'" width="24%"></p><h2 id="常见问题qa" tabindex="-1">常见问题QA <a class="header-anchor" href="#常见问题qa" aria-label="Permalink to &quot;常见问题QA&quot;">​</a></h2><p><strong>Q1. 为什么第一次调用 WX.ShowOpenData 之后画面先黑一下再展示排行榜？</strong></p><ul><li><code>WX.ShowOpenData</code> 在 <code>openDataContext.postMessage</code> <code>WXRender</code> 的事件之后立马就会开始 hook Unity 的渲染，如果开放数据域在监听到 <code>WXRender</code> 事件之后没有任何渲染行为，那么 sharedCanvas 纹理就还没有准备好，Unity 侧就可能出现黑一下的情况，解决办法是保证监听到 <code>WXRender</code> 事件之后有个同步的渲染行为，比如绘制个文案”好友数据加载中...&quot;。</li></ul><p><strong>Q2. 为什么我关闭排行榜之后界面上有些问题错乱了？</strong></p><ul><li>基本上只可能是没调用 <code>WX.HideOpenData</code>，建议 <code>WX.HideOpenData</code> 打些日志来辅佐排查。</li></ul><p><strong>Q3. 为什么开放数据域滚动事件不生效？</strong></p><ul><li><code>WX.ShowOpenData(rawImage.texture, x, y, width, height)</code>的后面四个参数，核心目的是告诉开放数据域 sharedCanvas 最终被绘制在了屏幕的位置和尺寸，开放数据域才能够正确处理事件监听，遇到事件不生效的问题，首先排查传进来的参数是否符合预期，比如 x / y 不应该是负数。</li></ul><p><strong>Q4. 为什么使用ScreenCanvas模式之后，ToTempFilePath没有开放数据域的画面了？</strong></p><ul><li>因为ScreenCanvas模式的画布是浮在游戏主画布之上的，并不是同一个画布，如需保存开放数据域画面，需要使用<code>WXSharedCanvas.ToTempFilePath</code>，使用示例参考<a href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/tree/main/Demo/Ranking" target="_blank" rel="noreferrer">示例</a></li></ul>',71),c=[y];function F(m,u,C,D,A,b){return a(),i("div",null,c)}const w=s(o,[["render",F]]);export{B as __pageData,w as default};
