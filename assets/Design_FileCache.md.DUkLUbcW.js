import{_ as a,c as s,o as i,a4 as e}from"./chunks/framework.Br2U662V.js";const l="/minigame-unity-webgl-transform/assets/file_cache.BSYo5Xk8.png",n="/minigame-unity-webgl-transform/assets/cache_path.DmEqMbAH.png",E=JSON.parse('{"title":"资源缓存","description":"","frontmatter":{},"headers":[],"relativePath":"Design/FileCache.md","filePath":"Design/FileCache.md"}'),t={name:"Design/FileCache.md"},h=e('<h1 id="资源缓存" tabindex="-1">资源缓存 <a class="header-anchor" href="#资源缓存" aria-label="Permalink to &quot;资源缓存&quot;">​</a></h1><ul><li><a href="#资源缓存">资源缓存</a></li><li><a href="#介绍">介绍</a><ul><li><a href="#一什么情况触发资源缓存">一、什么情况触发资源缓存</a></li><li><a href="#二哪些资源会自动缓存">二、哪些资源会自动缓存？</a></li><li><a href="#三缓存规则">三、缓存规则</a><ul><li><a href="#相关配置">相关配置</a><ul><li><a href="#是否缓存规则">是否缓存规则</a><ul><li><a href="#是否缓存业务资源">是否缓存业务资源</a></li><li><a href="#是否缓存纹理">是否缓存纹理</a></li></ul></li><li><a href="#资源淘汰规则">资源淘汰规则</a><ul><li><a href="#识别业务资源版本">识别业务资源版本</a></li><li><a href="#识别纹理资源版本">识别纹理资源版本</a></li></ul></li><li><a href="#缓存清理规则">缓存清理规则</a></li></ul></li><li><a href="#示例">示例</a></li></ul></li><li><a href="#四查看缓存日志">四、查看缓存日志</a><ul><li><a href="#判断是否走缓存">判断是否走缓存</a></li><li><a href="#其他缓存日志">其他缓存日志</a></li></ul></li><li><a href="#对外接口">对外接口</a><ul><li><a href="#public-string-wxplugincachepath"><code>public string WX.PluginCachePath</code></a></li><li><a href="#public-string-wxgetcachepathstring-url"><code>public string WX.GetCachePath(string url)</code></a></li><li><a href="#public-void-cleanallfilecacheactionbool-action"><code>public void CleanAllFileCache(Action&lt;bool&gt; action)</code></a></li><li><a href="#public-void-cleanfilecacheint-filesize-actionreleaseresult-action"><code>public void CleanFileCache(int fileSize, Action&lt;ReleaseResult&gt; action)</code></a></li><li><a href="#public-void-removefilestring-path-actionbool-action"><code>public void RemoveFile(string path, Action&lt;bool&gt; action)</code></a></li><li><a href="#"></a></li></ul></li><li><a href="#五注意项">五、注意项</a></li><li><a href="#qa">QA</a><ul><li><a href="#1-pc上配置为不自动缓存的文件仍然没有走网络下载">1. PC上配置为不自动缓存的文件，仍然没有走网络下载</a></li><li><a href="#2-同一个文件日志提示执行缓存逻辑下次运行时仍然从网络下载">2. 同一个文件，日志提示执行缓存逻辑，下次运行时仍然从网络下载</a></li><li><a href="#3-已经有无缓存执行缓存逻辑的日志缓存仍不生效下次访问资源仍从网络下载">3. 已经有<code>无缓存，执行缓存逻辑</code>的日志，缓存仍不生效，下次访问资源仍从网络下载</a></li><li><a href="#4-如何切换备用cdn地址">4. 如何切换备用CDN地址</a></li><li><a href="#5-一些配置文件不希望被自动清理由业务控制何时清理">5. 一些配置文件不希望被自动清理，由业务控制何时清理</a></li></ul></li></ul></li></ul><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>小游戏主要存在三种类型的资源：</p><ol><li>wasm代码，即<code>wasm.code.unityweb</code>文件</li><li>首资源包，即<code>webgl.data.unityweb</code>文件</li><li>业务bundle资源</li></ol><p>其中，<strong>wasm代码和首资源包框架会强制缓存，开发者无需关心</strong>。本篇重点介绍业务资源的缓存规则。</p><p>与APP游戏不同，在小游戏中推荐将资源包拆分成为一个个小文件加载。结合启动Loader有以下优势：</p><ol><li>通过细粒度的资源拆分，提高下载成功率。</li><li>文件粒度缓存，降低版本更新时的流量消耗。</li><li>框架自动做缓存控制，开发者无需感知本地是否存在缓存。</li></ol><p>大致流程如图：</p><img src="'+l+`"><h2 id="一、什么情况触发资源缓存" tabindex="-1">一、什么情况触发资源缓存 <a class="header-anchor" href="#一、什么情况触发资源缓存" aria-label="Permalink to &quot;一、什么情况触发资源缓存&quot;">​</a></h2><p>当使用以下API发起网络请求时会检查是否需要缓存，以及是否命中缓存。</p><ul><li>UnityWebRequest</li><li>WWW</li><li>UnityWebRequestAssetBundle</li><li>Addressables</li></ul><p><strong>游戏业务侧无需关心资源是否有缓存，按照本地没有缓存来使用，正常调用API即可，当有缓存时，Loader插件会构造正常响应返回给游戏</strong></p><h2 id="二、哪些资源会自动缓存" tabindex="-1">二、哪些资源会自动缓存？ <a class="header-anchor" href="#二、哪些资源会自动缓存" aria-label="Permalink to &quot;二、哪些资源会自动缓存？&quot;">​</a></h2><ul><li>配置到<a href="./UsingPreload.html">预下载列表</a>的文件</li><li>用unity网络接口发起请求，且URL包含自动缓存路径标识符的文件</li><li>使用微信压缩纹理工具，且开启纹理缓存后，纹理资源</li></ul><h2 id="三、缓存规则" tabindex="-1">三、缓存规则 <a class="header-anchor" href="#三、缓存规则" aria-label="Permalink to &quot;三、缓存规则&quot;">​</a></h2><h3 id="相关配置" tabindex="-1">相关配置 <a class="header-anchor" href="#相关配置" aria-label="Permalink to &quot;相关配置&quot;">​</a></h3><p><code>Assets/WX-WASM-SDK/Editor/MiniGameConfig.asset</code> 中以下配置与缓存相关</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 业务资源相关</span></span>
<span class="line"><span>bundlePathIdentifier: 需要缓存的路径，用 \`;\`分隔 eg: StreamingAssets;bundles;</span></span>
<span class="line"><span>excludeFileExtensions: 当路径中包含字符时不需要缓存，用 \`;\`分隔 eg: .json;.hash</span></span>
<span class="line"><span>bundleHashLength: bundle中hash占多少长度</span></span>
<span class="line"><span>// 纹理相关</span></span>
<span class="line"><span>needCacheTextures: 是否缓存纹理</span></span>
<span class="line"><span>texturesPath: 纹理存放路径</span></span>
<span class="line"><span>texturesHashLength: 纹理中hash长度</span></span>
<span class="line"><span>// 缓存淘汰相关</span></span>
<span class="line"><span>defaultReleaseSize: 清理缓存时默认额外清理的大小，单位Bytes，默认值30MB</span></span>
<span class="line"><span>maxStorage: 最大缓存容量，单位MB，默认值200MB</span></span></code></pre></div><p>其中部分配置可通过转换插件面板快速修改：</p><ul><li><code>bundleExcludeExtensions</code> 对应 <code>不自动缓存文件类型</code> 配置</li><li><code>bundleHashLength</code> 对应 <code>Bundle名中Hash长度</code> 配置</li></ul><h4 id="是否缓存规则" tabindex="-1">是否缓存规则 <a class="header-anchor" href="#是否缓存规则" aria-label="Permalink to &quot;是否缓存规则&quot;">​</a></h4><p>存在业务的bundle资源和使用微信压缩纹理工具后的纹理资源，不同资源的缓存细节略有不同。</p><h5 id="是否缓存业务资源" tabindex="-1">是否缓存业务资源 <a class="header-anchor" href="#是否缓存业务资源" aria-label="Permalink to &quot;是否缓存业务资源&quot;">​</a></h5><p>默认URL中包含<code>StreamingAssets</code>的请求会被识别为资源文件被自动缓存，可修改 <code>bundlePathIdentifier</code> 为你期望的值</p><p>并非所有文件都适合持久化缓存，因此缓存规则也支持忽略某些文件，默认包含 <code>.json</code> 的文件不会被自动缓存，可修改 <code>bundleExcludeExtensions</code>。等同于修改<strong>导出插件面板</strong>的<code>不自动缓存文件类型</code>配置</p><p>对应 js 代码，<code>minigame/unity-namespace.js</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断是否需要自动缓存的文件，返回true自动缓存；false不自动缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unityNamespace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCacheableFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判定为下载bundle的路径标识符，此路径下的下载，会自动缓存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cacheableFileIdentifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StreamingAssets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 命中路径标识符的情况下，并不是所有文件都有必要缓存，过滤下不需要缓存的文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> excludeFileIdentifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cacheableFileIdentifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">identifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(identifier)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> excludeFileIdentifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">every</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">excludeIdentifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(excludeIdentifier)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h5 id="是否缓存纹理" tabindex="-1">是否缓存纹理 <a class="header-anchor" href="#是否缓存纹理" aria-label="Permalink to &quot;是否缓存纹理&quot;">​</a></h5><p>默认会缓存纹理，修改<code>needCacheTextures</code>可控制是否缓存纹理资源。</p><p>通过<code>texturesPath</code>可让Loader识别一条请求是否为纹理，默认为<code>Assets/Textures</code></p><h4 id="资源淘汰规则" tabindex="-1">资源淘汰规则 <a class="header-anchor" href="#资源淘汰规则" aria-label="Permalink to &quot;资源淘汰规则&quot;">​</a></h4><p>如开篇的流程图所示，当需要自动缓存的文件在写入本地之前，若本地已经有此文件的旧缓存，则先清理旧缓存，再执行写入，那么需要一个手段来区分资源版本。</p><h5 id="识别业务资源版本" tabindex="-1">识别业务资源版本 <a class="header-anchor" href="#识别业务资源版本" aria-label="Permalink to &quot;识别业务资源版本&quot;">​</a></h5><p>框架不会做额外计算来验证资源版本，通过文件名中带资源hash，可以在资源更新时，识别不同版本的资源。</p><p>以<code>Addressables</code>为例，打包参数加上<a href="https://docs.unity3d.com/ScriptReference/BuildAssetBundleOptions.AppendHashToAssetBundleName.html" target="_blank" rel="noreferrer">BuildAssetBundleOptions.AppendHashToAssetBundleName</a>，会携带32位长度的hash拼接到文件名末尾。</p><p>默认hash长度为<code>32</code>，可通过<code>bundleHashLength</code>修改。等同于修改<strong>导出插件面板</strong>的<code>Bundle名中Hash长度</code></p><p>以下几种命名都能识别到版本号<code>8d265a9dfd6cb7669cdb8b726f0afb1e</code> eg1: font_8d265a9dfd6cb7669cdb8b726f0afb1e eg2: font-8d265a9dfd6cb7669cdb8b726f0afb1e eg3: font_8d265a9dfd6cb7669cdb8b726f0afb1e.ttf</p><h5 id="识别纹理资源版本" tabindex="-1">识别纹理资源版本 <a class="header-anchor" href="#识别纹理资源版本" aria-label="Permalink to &quot;识别纹理资源版本&quot;">​</a></h5><p>因纹理打包规则不一致，hash长度也不一样，默认hash长度为<code>8</code>，可通过<code>texturesHashLength</code>配置。</p><h4 id="缓存清理规则" tabindex="-1">缓存清理规则 <a class="header-anchor" href="#缓存清理规则" aria-label="Permalink to &quot;缓存清理规则&quot;">​</a></h4><p>随着游戏进度的推进，累计资源体积可能会超过允许的最大值。</p><blockquote><p><em><strong>注意！！！此最大值通过<code>maxStorage</code>修改，未前往<code>mp后台-能力地图-生产提效包-空间提升</code>开通空间提升的游戏，请勿设置超过200MB的值</strong></em></p></blockquote><p>达到缓存上限后，一些游戏前期的资源已经不需要再被使用。 此时Loader会按照LRU规则，清理出所需大小，并且为了避免频繁触发清理，会默认多清理<code>30MB</code>的空间，可通过<code>defaultReleaseSize</code>修改。</p><p>同时，在清理时也支持忽略一些文件，永不被自动清理，只可通过fs接口主动删除。</p><p>通过导出的小游戏<code>minigame/unity-namespace.js</code>中<code>isErasableFile</code>javascript函数自行控制</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清理缓存时是否可被自动清理；返回true可自动清理；返回false不可自动清理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unityNamespace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isErasableFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 用于特定AssetBundle的缓存保持</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unityNamespace.WXAssetBundles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info.path)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 达到缓存上限时，不会被自动清理的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 例如，font文件不希望自动清理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inErasableIdentifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;font_8d265a9dfd6cb7669cdb8b726f0afb1e.ttf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inErasableIdentifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">identifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info.path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(identifier))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>假设有以下配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. DATA_CDN: https://weixin.qq.com/webgl</span></span>
<span class="line"><span>2. bundlePathIdentifier: [&#39;StreamingAssets&#39;]</span></span>
<span class="line"><span>3. bundleHashLength: 32</span></span></code></pre></div><p>在写入缓存前需要经过三步</p><ol><li>根据URL生成缓存路径 URL剔除掉DATA_CDN部分后作为缓存路径 例如：</li></ol><ul><li>DATA_CDN=<a href="https://weixin.qq.com/webgl" target="_blank" rel="noreferrer">https://weixin.qq.com/webgl</a></li><li>资源下载URL=<a href="https://weixin.qq.com/webgl/StreamingAssets/textures_8d265a9dfd6cb7669cdb8b726f0afb1e" target="_blank" rel="noreferrer">https://weixin.qq.com/webgl/StreamingAssets/textures_8d265a9dfd6cb7669cdb8b726f0afb1e</a></li></ul><p>那么：</p><ul><li>则缓存路径=\${wx.env.USER_DATA_PATH}StreamingAssets/textures_8d265a9dfd6cb7669cdb8b726f0afb1e</li><li>资源唯一标识=StreamingAssets/textures</li><li>资源版本=8d265a9dfd6cb7669cdb8b726f0afb1e</li></ul><p><em><strong>注意：资源实际部署的CDN前缀必须与转换面板填写的CDN地址一致，否则无法按照前文的缓存规则获得资源的唯一标识。导致缓存失败</strong></em></p><ol start="2"><li>清理掉同名旧文件 通过文件名中的hash区分同名文件的不同版本 继续上面的例子，假如本地已经有<code>StreamingAssets/textures_cdb8b726f0afb1e8d265a9dfd6cb7669</code> 在写入缓存前，插件认为已经本地已经有同名文件<code>StreamingAssets/textures</code>，但hash与本次写入的文件不一致，则需要删除<code>StreamingAssets/textures_cdb8b726f0afb1e8d265a9dfd6cb7669</code></li></ol><p>支持的bundle命名：需以<code>-</code>或<code>_</code>分割，当以其他符号分割时，无法正确处理版本信息，故无法正确删除旧版本资源</p><ul><li>textures_8d265a9dfd6cb7669cdb8b726f0afb1e</li><li>textures-8d265a9dfd6cb7669cdb8b726f0afb1e</li></ul><p>转换插件相关配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bundleHashLength: bundle中hash的长度</span></span></code></pre></div><ol start="3"><li>检查存储空间是否足够，是否需要清理 当已有缓存+待写入缓存超过允许的上限时，按照LRU清理出所需大小</li></ol><p>转换插件相关配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>defaultReleaseSize: 清理时，默认额外清理的大小，单位Bytes，1MB = 1024KB = 1024*1024Bytes</span></span>
<span class="line"><span>maxStorage: 最大缓存容量，修改此值需要联系研发助手开通权限，否则无效</span></span></code></pre></div><h2 id="四、查看缓存日志" tabindex="-1">四、查看缓存日志 <a class="header-anchor" href="#四、查看缓存日志" aria-label="Permalink to &quot;四、查看缓存日志&quot;">​</a></h2><p><a href="./UsingLoader.html#_3-6-插件调试日志">查看插件调试日志</a></p><h3 id="判断是否走缓存" tabindex="-1">判断是否走缓存 <a class="header-anchor" href="#判断是否走缓存" aria-label="Permalink to &quot;判断是否走缓存&quot;">​</a></h3><ol><li>自动缓存 出现以下两种日志，都可认为需要自动缓存</li></ol><ul><li><code>[PLUGIN LOG 10:32.52.915] CacheXMLHttpRequest_onload: shadowreceiverdepth_9551162e.bundle, 耗时:222ms,无缓存，执行缓存逻辑</code></li><li><code>[PLUGIN LOG 10:32.53.073] 缓存 shadowreceiverdepth_9551162e.bundle成功;size: 1.78KB,耗时: 79ms</code></li></ul><ol start="2"><li>命中本地缓存: <code>[PLUGIN LOG 20:18.38.275] CacheXMLHttpRequest_onload: scene999_tw_5b9ef7d7.bundle使用缓存, 耗时:37ms</code></li></ol><h3 id="其他缓存日志" tabindex="-1">其他缓存日志 <a class="header-anchor" href="#其他缓存日志" aria-label="Permalink to &quot;其他缓存日志&quot;">​</a></h3><ol><li><code>删除 xxx 旧缓存</code>：清理同名文件旧缓存</li><li><code>需要释放xxMB存储空间</code>：达到缓存上限，需要释放的空间大小</li><li><code>缓存文件数=xxx, 总文件大小=xxx</code>：当前缓存目录总文件数和总文件大小（单位 bytes）</li><li><code>删除文件: xx, md5:xx, size:xx, 耗时: xx</code>：清理旧缓存或达到缓存上限时删除文件</li></ol><h2 id="对外接口" tabindex="-1">对外接口 <a class="header-anchor" href="#对外接口" aria-label="Permalink to &quot;对外接口&quot;">​</a></h2><h3 id="public-string-wx-plugincachepath" tabindex="-1"><code>public string WX.PluginCachePath</code> <a class="header-anchor" href="#public-string-wx-plugincachepath" aria-label="Permalink to &quot;\`public string WX.PluginCachePath\`&quot;">​</a></h3><p>获取自动缓存的文件存储路径，返回值：<code>\${wx.env.USER_DATA_PATH}/__GAME_FILE_CACHE</code></p><ul><li>javascript接口</li></ul><blockquote><p><code>GameGlobal.manager.PLUGIN_CACHE_PATH</code></p></blockquote><h3 id="public-string-wx-getcachepath-string-url" tabindex="-1"><code>public string WX.GetCachePath(string url)</code> <a class="header-anchor" href="#public-string-wx-getcachepath-string-url" aria-label="Permalink to &quot;\`public string WX.GetCachePath(string url)\`&quot;">​</a></h3><p>传入URL或文件相对路径，若本地有文件缓存，返回缓存路径，否则返回空字符串</p><ul><li>javascript接口</li></ul><blockquote><p><code>GameGlobal.manager.getCachePath</code></p></blockquote><h3 id="public-void-cleanallfilecache-action-bool-action" tabindex="-1"><code>public void CleanAllFileCache(Action&lt;bool&gt; action)</code> <a class="header-anchor" href="#public-void-cleanallfilecache-action-bool-action" aria-label="Permalink to &quot;\`public void CleanAllFileCache(Action&lt;bool&gt; action)\`&quot;">​</a></h3><p>清理所有自动缓存的文件</p><ul><li>javascript接口</li></ul><blockquote><p><code>Promise&lt;boolean&gt; GameGlobal.manager.cleanAllCache()</code></p></blockquote><h3 id="public-void-cleanfilecache-int-filesize-action-releaseresult-action" tabindex="-1"><code>public void CleanFileCache(int fileSize, Action&lt;ReleaseResult&gt; action)</code> <a class="header-anchor" href="#public-void-cleanfilecache-int-filesize-action-releaseresult-action" aria-label="Permalink to &quot;\`public void CleanFileCache(int fileSize, Action&lt;ReleaseResult&gt; action)\`&quot;">​</a></h3><p>从自动缓存目录中释放指定大小的文件缓存</p><ul><li>javascript接口</li></ul><blockquote><p><code>Promise&lt;ReleaseResult&gt; GameGlobal.manager.cleanCache(fileSize)</code></p></blockquote><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 清理文件缓存的结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReleaseResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// 无需清理，空间足够</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    noNeedRelease</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// 超过最大存储容量，不清理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exceedMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// 清理成功</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    releaseSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="public-void-removefile-string-path-action-bool-action" tabindex="-1"><code>public void RemoveFile(string path, Action&lt;bool&gt; action)</code> <a class="header-anchor" href="#public-void-removefile-string-path-action-bool-action" aria-label="Permalink to &quot;\`public void RemoveFile(string path, Action&lt;bool&gt; action)\`&quot;">​</a></h3><p>从自动缓存目录中删除指定文件</p><ul><li>javascript接口</li></ul><blockquote><p><code>Promise&lt;void&gt; GameGlobal.manager.removeFile(path)</code></p></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="五、注意项" tabindex="-1">五、注意项 <a class="header-anchor" href="#五、注意项" aria-label="Permalink to &quot;五、注意项&quot;">​</a></h2><ol><li>文件名需要带上hash <a href="https://docs.unity3d.com/ScriptReference/BuildAssetBundleOptions.AppendHashToAssetBundleName.html" target="_blank" rel="noreferrer">BuildAssetBundleOptions.AppendHashToAssetBundleName</a>，以便清理掉该文件的旧缓存。默认32位长度，可通过导出选项中<code>Bundle名中Hash长度</code>来自定义。比如游戏自己计算了crc，可将<code>Bundle名中Hash长度</code>设置为crc长度。</li><li>配置到不自动缓存文件类型中的文件，不会自动缓存，默认值是json，比如addressable打包后生成StreamingAssets/aa/WebGL/catalog.json，这个文件不会自动缓存。</li><li>缓存目录</li></ol><ul><li>开发者工具上可以打开文件系统查看缓存文件 缓存文件在usr目录下</li></ul><img src="`+n+'"><ul><li>真机安卓缓存目录：data/com.tencent.mm/MicroMsg/wxanewfiles/随机ID(根据最近使用时间判断是哪个目录)</li><li>windows缓存目录：微信-设置-文件管理-打开文件夹；打开文件管理后进入<code>Applet\\${appid}\\${appState}\\usr\\</code></li></ul><ol><li><p>当文件没有正常缓存时，着重检查 缓存规则 中 <code>资源下载URL</code> 、<code>DATA_CDN</code>、和 <code>bundlePathIdentifier</code>，当<code>资源下载URL</code>中不包含<code>DATA_CDN</code>时，不会走缓存逻辑。</p></li><li><p>真机安卓缓存目录：data/com.tencent.mm/MicroMsg/wxanewfiles/随机ID(根据最近使用时间判断是哪个目录)</p></li><li><p>未开通<code>mp后台-能力地图-生产提效包-空间提升</code>的游戏，修改<code>maxStorage</code>超过200MB会导致出现写缓存失败。</p></li></ol><h2 id="qa" tabindex="-1">QA <a class="header-anchor" href="#qa" aria-label="Permalink to &quot;QA&quot;">​</a></h2><h3 id="_1-pc上配置为不自动缓存的文件-仍然没有走网络下载" tabindex="-1">1. PC上配置为不自动缓存的文件，仍然没有走网络下载 <a class="header-anchor" href="#_1-pc上配置为不自动缓存的文件-仍然没有走网络下载" aria-label="Permalink to &quot;1. PC上配置为不自动缓存的文件，仍然没有走网络下载&quot;">​</a></h3><p>PC上使用了Chromium的网络模块，存在HTTP缓存，可通过请求添加时间戳、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching#%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98" target="_blank" rel="noreferrer">服务器返回不缓存的头</a></p><h3 id="_2-同一个文件-日志提示执行缓存逻辑-下次运行时仍然从网络下载" tabindex="-1">2. 同一个文件，日志提示执行缓存逻辑，下次运行时仍然从网络下载 <a class="header-anchor" href="#_2-同一个文件-日志提示执行缓存逻辑-下次运行时仍然从网络下载" aria-label="Permalink to &quot;2. 同一个文件，日志提示执行缓存逻辑，下次运行时仍然从网络下载&quot;">​</a></h3><p>可能有两种情况：</p><ol><li>请求同名资源的不同版本 可能<a href="./UsingPreload.html">预下载列表</a>中配置的资源版本和UnityWebRequest请求的版本不一致，由于缓存清理逻辑：</li></ol><ul><li>先下载版本A，若本地有版本B，版本B被清理后写入版本A的缓存</li><li>再下载版本B，此时版本A缓存被清理，写入版本B缓存</li><li>下次启动游戏再次下载版本A，此时本地有版本B，清理后写入版本A</li></ul><p>如何检查：从缓存日志中搜索不带hash的资源名，出现两个版本的下载日志。</p><ol start="2"><li>缓存写满之后的自动清理逻辑 当出现以下日志，可认为资源被自动清理，可查阅本篇「缓存清理规则」</li></ol><ul><li><code>需要释放xxMB存储空间</code></li><li><code>删除文件: xx, md5:xx, size:xx, 耗时: xx</code></li></ul><h3 id="_3-已经有无缓存-执行缓存逻辑的日志-缓存仍不生效-下次访问资源仍从网络下载" tabindex="-1">3. 已经有<code>无缓存，执行缓存逻辑</code>的日志，缓存仍不生效，下次访问资源仍从网络下载 <a class="header-anchor" href="#_3-已经有无缓存-执行缓存逻辑的日志-缓存仍不生效-下次访问资源仍从网络下载" aria-label="Permalink to &quot;3. 已经有`无缓存，执行缓存逻辑`的日志，缓存仍不生效，下次访问资源仍从网络下载&quot;">​</a></h3><p>资源下载URL中不包含DATA_CDN部分，可能是运行期间修改了CDN，但并没有同步修改资源下载URL。</p><p>如何检查：</p><ul><li>启动插件版本&gt;=1.2.41，会在开发阶段输出错误日志<code>缓存路径不合法 请检查DATA_CDN配置和请求URL是否匹配</code>，提示出错的资源信息</li><li>启动插件版本&lt;=1.2.41，开发者工具通过Network面板查看资源下载URL，确认是否和DATA_CDN不一致；真机可通过抓包工具查看下载URL；</li></ul><h3 id="_4-如何切换备用cdn地址" tabindex="-1">4. 如何切换备用CDN地址 <a class="header-anchor" href="#_4-如何切换备用cdn地址" aria-label="Permalink to &quot;4. 如何切换备用CDN地址&quot;">​</a></h3><p>参考<a href="./UsingLoader.html#_3-1-资源下载">Unity Loader - 资源下载</a></p><h3 id="_5-一些配置文件不希望被自动清理-由业务控制何时清理" tabindex="-1">5. 一些配置文件不希望被自动清理，由业务控制何时清理 <a class="header-anchor" href="#_5-一些配置文件不希望被自动清理-由业务控制何时清理" aria-label="Permalink to &quot;5. 一些配置文件不希望被自动清理，由业务控制何时清理&quot;">​</a></h3><p>参考本篇「缓存清理规则」将这些文件添加到inErasableIdentifier中。</p><p>注意：业务侧注意在适当时机清理文件，否则文件将会一直在缓存目录中。</p>',121),p=[h];function d(o,c,r,k,u,g){return i(),s("div",null,p)}const f=a(t,[["render",d]]);export{E as __pageData,f as default};
