import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Br2U662V.js";const e="/minigame-unity-webgl-transform/assets/wxassetbundle.DrADi2AS.png",l="/minigame-unity-webgl-transform/assets/normal-assetbundle-memory.Iz7sHvbP.png",t="/minigame-unity-webgl-transform/assets/assetbundle-unnormal-memory.CY0FXhT_.png",F=JSON.parse('{"title":"使用 AssetBundle 进行资源按需加载","description":"","frontmatter":{},"headers":[],"relativePath":"Design/UsingAssetBundle.md","filePath":"Design/UsingAssetBundle.md"}'),h={name:"Design/UsingAssetBundle.md"},p=n(`<h1 id="使用-assetbundle-进行资源按需加载" tabindex="-1">使用 AssetBundle 进行资源按需加载 <a class="header-anchor" href="#使用-assetbundle-进行资源按需加载" aria-label="Permalink to &quot;使用 AssetBundle 进行资源按需加载&quot;">​</a></h1><p>阐述如何在小游戏环境对AssetBundle进行打包、加载和内存优化，同时推荐使用WXAssetBundle更自动化地节省内存。</p><h2 id="一、assetbundle使用" tabindex="-1">一、AssetBundle使用 <a class="header-anchor" href="#一、assetbundle使用" aria-label="Permalink to &quot;一、AssetBundle使用&quot;">​</a></h2><p>注意：小游戏环境不支持assetbundle本地加载</p><h3 id="_1-1-assetbundle打包参数建议" tabindex="-1">1.1 AssetBundle打包参数建议 <a class="header-anchor" href="#_1-1-assetbundle打包参数建议" aria-label="Permalink to &quot;1.1 AssetBundle打包参数建议&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Application.streamingAssetsPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/AssetBundles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BuildPipeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildAssetBundles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, BuildAssetBundleOptions.AppendHashToAssetBundleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildAssetBundleOptions.ChunkBasedCompression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildAssetBundleOptions.None, BuildTarget.WebGL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>打包bundle时，请使用如下参数</p><ul><li>【重要】BuildAssetBundleOptions.AppendHashToAssetBundleName：bundle带上hash。在小游戏底层对bundle做缓存及缓存淘汰时，hash是重要依据，请查阅<a href="./FileCache.html">小游戏资源缓存</a></li><li>BuildAssetBundleOptions.ChunkBasedCompression：LZ4压缩方式，加载速度和包体大小更均衡。</li><li>如非需要新老Unity引擎版本兼容，请使用DisableWriteTypeTree提升加载速度与降低内存。</li></ul><h3 id="_1-2-assetbundle下载" tabindex="-1">1.2 AssetBundle下载 <a class="header-anchor" href="#_1-2-assetbundle下载" aria-label="Permalink to &quot;1.2 AssetBundle下载&quot;">​</a></h3><p>从服务器下载bundle的方式主要以下两种：</p><ul><li><p>UnityWebRequestAssetBundle.GetAssetBundle</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnityWebRequest</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnityWebRequestAssetBundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAssetBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uriPath);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SendWebRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.isHttpError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/ERROR/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AssetBundle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.downloadHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadHandlerAssetBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).assetBundle;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ab.LoadAsset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ab.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p>UnityWebRequest</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnityWebRequest</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> www</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnityWebRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uriPath);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadHandlerAssetBundle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadHandlerAssetBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(www.uri.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.downloadHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> www.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (www.isHttpError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/ERROR/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> www.error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AssetBundle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.assetBundle</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ab.LoadAsset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ab.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><em><strong>特别地， 切忌使用WWW.LoadFromCacheOrDownload或WWW等带cache接口，WebGL模式下将会使用JS模拟文件系统带来额外内存消耗！</strong></em></p></li></ul><h2 id="二、小游戏与app的assetbundle缓存更新流程差异" tabindex="-1">二、小游戏与APP的AssetBundle缓存更新流程差异 <a class="header-anchor" href="#二、小游戏与app的assetbundle缓存更新流程差异" aria-label="Permalink to &quot;二、小游戏与APP的AssetBundle缓存更新流程差异&quot;">​</a></h2><p>小游戏因其平台特殊性，需要保证加载速度，因此我们在底层对bundle文件做了缓存，开发者无须自己实现缓存。</p><p>游戏逻辑还是按照未缓存需要从网络下载去编写，插件底层会判断是否已有缓存。若未缓存则缓存此bundle；若已缓存，则返回缓存文件，实际不会发起网络请求。</p><p>可参见<a href="./UsingLoader.html">资源缓存与淘汰</a></p><p>资源缓存与更新的不同，会导致APP与小游戏不同的加载流程</p><ul><li>常见APP AssetBundle使用方式:</li></ul><p>检查更新--&gt;下载更新全量资源--&gt;写入文件系统--&gt;运行时LoadFromFile</p><ul><li>微信小游戏 AssetBundle使用方式</li></ul><p>打包ab时文件名带hash--&gt;UnityWebRequest按需下载并使用资源</p><p><em><strong>在业务侧看来：总是使用异步接口从远程下载并使用，底层资源的缓存与更新已由适配层自动完成，游戏不再直接读写文件系统。</strong></em></p><h2 id="三、更节省内存的wxassetbundle" tabindex="-1">三、更节省内存的WXAssetBundle <a class="header-anchor" href="#三、更节省内存的wxassetbundle" aria-label="Permalink to &quot;三、更节省内存的WXAssetBundle&quot;">​</a></h2><ul><li><p>简介与原理</p><p>Unity的 <strong>AssetBundle.LoadFromFile()</strong> 原本是打开一个文件流，LoadAsset通过文件描述符fd去读实际的目标对象。<strong>因此不需要存储完整的AssetBundle（只需存储包头、查找表），可节省内存。</strong></p><p>而由于<a href="https://emscripten.org/docs/porting/files/file_systems_overview.html" target="_blank" rel="noreferrer"><strong>WebGL的文件系统是在JS内存中维护的</strong></a>，不会实际读写到磁盘，无法使用LoadFromFile()达到节约内存的目的。</p><p>为此，我们在微信小游戏环境将文件系统接口桥接到了微信的文件系统接口，使其可以读写到小游戏缓存目录。同时提供了包装好的Unity SDK以便开发者使用。</p><img src="`+e+`" width="800"></li><li><p>使用说明</p><p>Addressable也可使用，可参考<a href="./UsingAddressable.html#_2-4-使用wxassetbundleprovider节省内存">使用WXAssetBundleProvider节省内存</a> 修改Provider。</p><p>AssetBundle目前只支持异步加载。参考示例如下：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 【推荐】原本使用WebRequest的话可按如下修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeChatWasm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnityWebRequest</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundleReq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WXAssetBundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAssetBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UnityWebRequestAssetBundle =&gt; WXAssetBundle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundleReq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SendWebRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bundleReq.isHttpError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/ERROR/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundleReq.error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AssetBundle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bundleReq.downloadHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadHandlerWXAssetBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).assetBundle; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DownloadHandlerAssetBundle =&gt; DownloadHandlerWXAssetBundle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WXUnload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//bundle还是AssetBundle类型，但需要调用扩展方法WXUnload()才可真正卸载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>注意事项</p><p>此套接口只可在微信小游戏环境下使用！需要同时导出WebGL版本的，建议自行在修改接口时候加编译宏方便控制导出版本。</p><p>频繁读写磁盘损耗性能，于是我们仍旧在JS内存中维护了完整bundle的缓存，只有使用到已被清理的bundle时才会一次性从磁盘完整读进内存，而高频读取资源时通过缓存完成请求。<strong>默认情况下5秒未使用的bundle会被从内存中清理。</strong></p><p>读磁盘必定影响性能，所以我们只推荐对内存要求高的重度游戏使用。</p></li></ul><h2 id="四、assetbundle内存分析" tabindex="-1">四、AssetBundle内存分析 <a class="header-anchor" href="#四、assetbundle内存分析" aria-label="Permalink to &quot;四、AssetBundle内存分析&quot;">​</a></h2><h3 id="_4-1-切勿使用带cache能力的线管接口" tabindex="-1">4.1 切勿使用带Cache能力的线管接口 <a class="header-anchor" href="#_4-1-切勿使用带cache能力的线管接口" aria-label="Permalink to &quot;4.1 切勿使用带Cache能力的线管接口&quot;">​</a></h3><p>加载的bundle文件大小为5403162字节</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5403162</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 16:07</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image1_751427a66d22b184c95342d556354150</span></span></code></pre></div><p>通过加载前后snapshot来对比总内存变化</p><ul><li><p>UnityWebRequestAssetBundle.GetAssetBundle/UnityWebRequest/WWW 这三种加载方式加载前后内存无变化 <img src="`+l+'"></p></li><li><p>WWW.LoadFromCacheOrDownload 加载bundle后内存增加了5403162字节，增加了bundle大小的内存，是因为WWW.LoadFromCacheOrDownload除了会将文件存入IndexDB外，还会存入内存中的UnityCache <img src="'+t+'"></p></li></ul><p><strong>因此需要注意业务中不要使用已淘汰的WWW类，尤其WWW.LoadFromCacheOrDownload，当bundle数量多时，会浪费不少内存。</strong></p><h3 id="_4-2-尽可能使用unload" tabindex="-1">4.2 尽可能使用Unload <a class="header-anchor" href="#_4-2-尽可能使用unload" aria-label="Permalink to &quot;4.2 尽可能使用Unload&quot;">​</a></h3><ul><li>当bundle从资源服务器下载并使用，会经历多次内存分配: 浏览器HTTP对象--&gt;拷贝到WASM临时内存--&gt;Unity ab内存文件(略大于ab本身体积， 相对于APP常用的LoadFromFile，WebGL这部分开销是额外的)</li><li>当HTTP对象dispose之后，Unity ab内存文件</li><li>当ab.Unload时，Unity ab内存文件释放</li></ul><p>因此，最佳实践是业务应该尽可能早地使用ab.Unload(false)，自行维护Asset的引用计数管理资源。</p><h2 id="四、参考资料" tabindex="-1">四、参考资料 <a class="header-anchor" href="#四、参考资料" aria-label="Permalink to &quot;四、参考资料&quot;">​</a></h2><ol><li>Introduction to Asset Bundles <a href="https://learn.unity.com/tutorial/introduction-to-asset-bundles#6028bab6edbc2a750bf5b8a7" target="_blank" rel="noreferrer">https://learn.unity.com/tutorial/introduction-to-asset-bundles#6028bab6edbc2a750bf5b8a7</a></li><li>Unity WebGL Memory Optimization: Part Deux <a href="https://blog.kongregate.com/unity-webgl-memory-optimization-part-deux/" target="_blank" rel="noreferrer">https://blog.kongregate.com/unity-webgl-memory-optimization-part-deux/</a></li><li>Understanding Memory in Unity WebGL <a href="https://blog.unity.com/technology/understanding-memory-in-unity-webgl" target="_blank" rel="noreferrer">https://blog.unity.com/technology/understanding-memory-in-unity-webgl</a></li><li>AssetBundle API <a href="https://docs.unity3d.com/2019.4/Documentation/ScriptReference/AssetBundle.html" target="_blank" rel="noreferrer">https://docs.unity3d.com/2019.4/Documentation/ScriptReference/AssetBundle.html</a></li></ol>',35),k=[p];function d(r,E,g,o,u,y){return a(),i("div",null,k)}const b=s(h,[["render",d]]);export{F as __pageData,b as default};
