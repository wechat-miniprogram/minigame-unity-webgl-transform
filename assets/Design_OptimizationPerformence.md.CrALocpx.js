import{_ as e}from"./chunks/IOSDevicePixelRatio.DHUlmbuM.js";import{_ as a,c as i,o as r,a4 as l}from"./chunks/framework.Br2U662V.js";const t="/minigame-unity-webgl-transform/assets/optimizationperformence1.CW91_65C.png",n="/minigame-unity-webgl-transform/assets/optimizationperformence2.Bbu1amCi.png",g=JSON.parse('{"title":"优化Unity WebGL的运行性能","description":"","frontmatter":{},"headers":[],"relativePath":"Design/OptimizationPerformence.md","filePath":"Design/OptimizationPerformence.md"}'),o={name:"Design/OptimizationPerformence.md"},s=l('<h1 id="优化unity-webgl的运行性能" tabindex="-1">优化Unity WebGL的运行性能 <a class="header-anchor" href="#优化unity-webgl的运行性能" aria-label="Permalink to &quot;优化Unity WebGL的运行性能&quot;">​</a></h1><h2 id="一、运行性能概述" tabindex="-1">一、运行性能概述 <a class="header-anchor" href="#一、运行性能概述" aria-label="Permalink to &quot;一、运行性能概述&quot;">​</a></h2><p>Unity WebGL是以WebAssebly(WASM)+WebGL为核心的技术方案，运行性能会极大影响可承载的游戏内容玩法。</p><p>本文主要介绍Unity WebGL与基于JS引擎的普通H5游戏、原生APP手游之间技术栈导致的性能差异，以及不同系统平台(Android、iOS、Windows PC)之间的性能差异。其次阐述在微信小游戏环境下最佳的性能优化工具与常见优化手段。</p><h3 id="unity-webgl-vs-app的运行性能差异" tabindex="-1">Unity WebGL VS APP的运行性能差异 <a class="header-anchor" href="#unity-webgl-vs-app的运行性能差异" aria-label="Permalink to &quot;Unity WebGL VS APP的运行性能差异&quot;">​</a></h3><ul><li><p>CPU性能差异</p><ul><li>Unity WebGL是以WASM虚拟机的形式运行在类浏览器环境中，因此CPU算力会受限于虚拟机的执行效率。</li><li>Unity WebGL目前不支持多线程，导致部分模块比如AI、动画、渲染无法得到多线程的加速。</li></ul><p>这是导致了Unity WebGL与APP存在性能差距的最主要因素。<em><strong>通常而言，Unity WebGL是APP手游性能的1/3，开发者应该特别注意CPU侧的性能瓶颈。</strong></em></p><p>可通过<a href="https://blog.unity.com/technology/benchmarking-unity-performance-in-webgl" target="_blank" rel="noreferrer">Benchmarking Unity performance in WebGL</a>了解Unity不同模块与手游APP的性能差异。 <img src="'+t+'" width="600"></p></li><li><p>GPU性能差异</p><ul><li>Unity是以WebGL API进行渲染，其中WebGL1.0相当于OpenGLES2.0, WebGL2.0相当于OpenGLES3.0。</li><li>WebGL在原生的渲染API进行封装存在少量负荷带来的开销，但基本的渲染能力与原生APP接近。</li><li>渲染特性如GPU Instantcing、SRP Batcher需要WebGL2.0。 （需要注意的是，当APP手游使用了这些特性时，在小游戏未开启WebGL2.0时则会进一步拉大差距）</li></ul></li></ul><h3 id="wasm-vs-js的运行差异" tabindex="-1">WASM VS JS的运行差异 <a class="header-anchor" href="#wasm-vs-js的运行差异" aria-label="Permalink to &quot;WASM VS JS的运行差异&quot;">​</a></h3><ul><li>WASM是强类型语言，这将使得JIT优化能更准确预判运行期类型，因此相对于JS能更快达到JIT指令优化后的峰值。通常而言，WASM~=1.5 * JS, 即JS运行效率的150%以上。</li><li>Unity引擎目前没有很好地针对浏览器环境优化（比如WASM与宿主接口互调频次、不必要的代码路径裁）会比较臃肿，一些应用场景反而不如JS轻量。</li></ul><p>因此，两者在实际使用时并不能简单以语言算力对比，需要以实测游戏为准。</p><h3 id="系统平台之间的性能差异" tabindex="-1">系统平台之间的性能差异 <a class="header-anchor" href="#系统平台之间的性能差异" aria-label="Permalink to &quot;系统平台之间的性能差异&quot;">​</a></h3><ul><li>Android与Windows PC使用V8作为WASM虚拟机内核，支持JIT，在相同算力条件下两者性能是接近的。但要注意移动平台散热更差，因此对性能更苛刻。</li><li>iOS默认为普通模式，不支持JIT，可用于超休闲游戏；中重度游戏建议开启<a href="./iOSOptimization.html">iOS高性能模式</a>以支持JIT，但该模式需要更多精力进行调优，特别是启动发烫与内存方面。</li></ul><h2 id="二、优化目标" tabindex="-1">二、优化目标 <a class="header-anchor" href="#二、优化目标" aria-label="Permalink to &quot;二、优化目标&quot;">​</a></h2><p>由于Unity WebGL的性能无法完全达到原生APP的性能水平，<em><strong>开发者需要根据不同品类的游戏建立不同的最低机型要求和流畅度标准。</strong></em> 建议：</p><ul><li>轻度休闲游戏应保证低档机型30fps以上，需特别注意机型兼容性(可使用小游戏云测获取兼容性报告)，以达到买量用户覆盖度。</li><li>中重度游戏应保证中高档机不限帧时达到40fps以上，实际运行可限帧30以保持长时间挂机运行的发热量。</li></ul><p>详细的基准机型与性能要求可参考<a href="./PerfMeasure.html">性能评估标准</a>，<em><strong>微信小游戏平台对上线无严格的性能要求，需要开发者根据自身游戏商业化要求制定。</strong></em></p><h2 id="三、常用优化工具" tabindex="-1">三、常用优化工具 <a class="header-anchor" href="#三、常用优化工具" aria-label="Permalink to &quot;三、常用优化工具&quot;">​</a></h2><h3 id="_3-1-小游戏android-cpu-profiler-推荐" tabindex="-1">3.1 小游戏Android CPU Profiler(推荐) <a class="header-anchor" href="#_3-1-小游戏android-cpu-profiler-推荐" aria-label="Permalink to &quot;3.1 小游戏Android CPU Profiler(推荐)&quot;">​</a></h3><p>微信小游戏请<a href="./AndroidProfile.html">使用 Android CPU Profiler 性能调优</a>，在勾选Profile-funcs选项后，使用工具在真机上获取Profile数据以分析热点函数和性能瓶颈，非常建议开发者熟练使用，无论是启动耗时或运行时流畅分析都非常有用。</p><ul><li>工具本身不会造成大幅度的性能降低</li><li>精确获取每帧性能瓶颈，也支持时间段内的汇总信息</li><li>支持真机获取，能准确反映游戏实际运行情况</li></ul><h3 id="_3-2-unity-profiler" tabindex="-1">3.2 Unity Profiler <a class="header-anchor" href="#_3-2-unity-profiler" aria-label="Permalink to &quot;3.2 Unity Profiler&quot;">​</a></h3><p>Unity Profiler的运行原理是在Unity Editor监听固定端口，Unity WebGL游戏运行时以WebSocket连接并定期发送性能数据。</p><ul><li>工具需要开启development模式，对性能有较大影响</li><li>可获取函数热点、内存与模块上报数据（比如物理、动画等）</li><li>不是很稳定，部分版本会出现无法连接的情况</li><li>内存数据不准确，并不能反应真实使用情况，内存工具请查阅<a href="/minigame-unity-webgl-transform/Design/OptimizationMemory.html">优化Unity WebGL的内存</a></li></ul><h3 id="_3-3-小游戏云测" tabindex="-1">3.3 小游戏云测 <a class="header-anchor" href="#_3-3-小游戏云测" aria-label="Permalink to &quot;3.3 小游戏云测&quot;">​</a></h3><p>小游戏云测是使用大量真实的移动设备测试游戏的功能、性能、兼容性。</p><ul><li>重点关注兼容性问题，比如黑屏、无法启动问题</li><li>启动与运行性能由于网络和设备条件稳定性问题不一定准确，建议以<a href="./PerfMeasure.html">性能评估标准</a>实测为准</li><li>运行环境以CR识别+随机点击，开发者也可以通过WX.cs的接口判定当前云测环境让游戏自动运行特定逻辑</li></ul><h2 id="三、常见优化手段" tabindex="-1">三、常见优化手段 <a class="header-anchor" href="#三、常见优化手段" aria-label="Permalink to &quot;三、常见优化手段&quot;">​</a></h2><h3 id="_1-配置加载与协议解析" tabindex="-1">1. 配置加载与协议解析 <a class="header-anchor" href="#_1-配置加载与协议解析" aria-label="Permalink to &quot;1. 配置加载与协议解析&quot;">​</a></h3><p>不用使用XML、JSON解析大文件，尤其是在游戏启动阶段，字符串类型解析器将耗费大量CPU算力与产生GC。比如大型游戏在使用Addressable时catalog文件往往会超过10MB，导致解析过慢而影响启动速度，此时应使用其他资源管理比如AssetBundle来减少资源索引文件大小。同样地，在游戏过程中也尽量避免这类CPU消耗。</p><h3 id="_2-lua性能" tabindex="-1">2. LUA性能 <a class="header-anchor" href="#_2-lua性能" aria-label="Permalink to &quot;2. LUA性能&quot;">​</a></h3><p>Unity WebGL环境的lua不支持JIT，因此需要避免用于重度逻辑。可<a href="/minigame-unity-webgl-transform/Design/AndroidProfile.html">使用 Android CPU Profiler 性能调优</a>查看LUA的耗时占比。</p><h3 id="_3-物理性能" tabindex="-1">3. 物理性能 <a class="header-anchor" href="#_3-物理性能" aria-label="Permalink to &quot;3. 物理性能&quot;">​</a></h3><p>请参考文档<a href="https://docs.unity3d.com/cn/2021.3/Manual/iphone-Optimizing-Physics.html" target="_blank" rel="noreferrer">优化物理性能</a>，适当调整Fixed Timestep与 Maximum Allowed Timestep降低计算频率。</p><h3 id="_4-实例化" tabindex="-1">4. 实例化 <a class="header-anchor" href="#_4-实例化" aria-label="Permalink to &quot;4. 实例化&quot;">​</a></h3><p>由于Unity WebGL是单线程模型，因此耗时长的CPU运算会影响帧率。较为普遍的是AssetBundle加载与Prefab实例化，通过优化逻辑分帧加载可大幅度提升游戏体验。</p><h3 id="_5-限制帧率" tabindex="-1">5. 限制帧率 <a class="header-anchor" href="#_5-限制帧率" aria-label="Permalink to &quot;5. 限制帧率&quot;">​</a></h3><p>限制帧率有利于降低设备发热量与提升游戏时长，对帧率不敏感游戏建议使用, 可使用Application.targetFramerate限帧，当帧率为15/30/60使用raf分片处理，其余值使用timer控制。</p><h3 id="_6-限制分辨率" tabindex="-1">6. 限制分辨率 <a class="header-anchor" href="#_6-限制分辨率" aria-label="Permalink to &quot;6. 限制分辨率&quot;">​</a></h3><p>限制分辨率以一定的画质牺牲来降低对设备消耗，在小游戏平台请勿使用Unity的SetResulution等接口修改分辨率，应使用DevicePixelRatio来控制(仅支持ios、android)。设备默认DevicePixelRatio(最后一列dpi)如下：</p><img src="'+n+'" width="800"><p>如需强制设置iOS的设备分辨率可以在【导出面板-更多配置项-Project Conf】中修改配置 <code>IOS Device Pixel Ratio</code> 为 2：</p><img src="'+e+`" width="200"><ul><li>可降低渲染压力可明显降低设备发热量</li><li>减少内存使用，降低分辨率后可降低50-100MB内存</li><li>需开发者自行评估DevicePixelRatio降低后的品质变化</li></ul><h3 id="_7-使用压缩纹理" tabindex="-1">7. 使用压缩纹理 <a class="header-anchor" href="#_7-使用压缩纹理" aria-label="Permalink to &quot;7. 使用压缩纹理&quot;">​</a></h3><p>在压缩纹理不支持的情况下，纹理会由于需要在CPU中软解为RGB/RGBA32造成巨大的CPU和内存消耗，运行中的这种行为会造成明显的帧率卡顿问题，建议使用<a href="./CompressedTexture.html">压缩纹理优化</a>。</p><h3 id="_8-webgl2-0说明" tabindex="-1">8. WebGL2.0说明 <a class="header-anchor" href="#_8-webgl2-0说明" aria-label="Permalink to &quot;8. WebGL2.0说明&quot;">​</a></h3><p>请查阅<a href="./WebGL2.html">WebGL2.0渲染支持说明</a></p><h3 id="_9-减少drawcall" tabindex="-1">9. 减少Drawcall <a class="header-anchor" href="#_9-减少drawcall" aria-label="Permalink to &quot;9. 减少Drawcall&quot;">​</a></h3><p>大量DC会造成非常大的CPU压力，当场景渲染物件过多时应该采取适当的措施减少Drawcall</p><ul><li>标准渲染管线，适当使用Static Batch以减少DC</li><li>可开启WebGL2.0时使用GPU Instantcing</li><li>尽可能地设置LOD、可见范围以降低渲染物件</li></ul><h3 id="_10-使用srp-batcher" tabindex="-1">10. 使用SRP Batcher <a class="header-anchor" href="#_10-使用srp-batcher" aria-label="Permalink to &quot;10. 使用SRP Batcher&quot;">​</a></h3><p>Uinty WebGL的SRP Batcher需要两个先决条件：Unity 2021以上 + WebGL2.0</p><h3 id="_11-如何获取设备硬件信息" tabindex="-1">11. 如何获取设备硬件信息 <a class="header-anchor" href="#_11-如何获取设备硬件信息" aria-label="Permalink to &quot;11. 如何获取设备硬件信息&quot;">​</a></h3><ul><li>使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getDeviceInfo.html" target="_blank" rel="noreferrer">wx.getDeviceInfo</a>获取硬件信息， <em><strong>该接口使用前需自行判断是否满足基础库版本要求</strong></em>。新版本已新增memorySize 和 CPUType获取设备内存、CPU型号</li><li>使用JS代码获取GPU信息<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>  const debugInfo = gl.getExtension(&#39;WEBGL_debug_renderer_info&#39;);</span></span>
<span class="line"><span>  const vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);</span></span>
<span class="line"><span>  const renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);</span></span>
<span class="line"><span>  console.log(vendor);</span></span>
<span class="line"><span>  console.log(renderer);</span></span></code></pre></div></li></ul>`,53),h=[s];function d(p,c,m,u,b,P){return r(),i("div",null,h)}const U=a(o,[["render",d]]);export{g as __pageData,U as default};
