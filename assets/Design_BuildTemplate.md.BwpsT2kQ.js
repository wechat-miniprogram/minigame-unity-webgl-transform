import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.Br2U662V.js";const p="/minigame-unity-webgl-transform/assets/buildtemplateprocess.BJDyZOCI.png",y=JSON.parse('{"title":"配置构建模板","description":"","frontmatter":{},"headers":[],"relativePath":"Design/BuildTemplate.md","filePath":"Design/BuildTemplate.md"}'),l={name:"Design/BuildTemplate.md"},e=n(`<h1 id="配置构建模板" tabindex="-1">配置构建模板 <a class="header-anchor" href="#配置构建模板" aria-label="Permalink to &quot;配置构建模板&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Unity/团结快适配项目最终导出 <code>minigame</code> 目录即为微信小游戏代码包，使用微信开发者工具打开并上传。该部分主要由 JavaScript、JSON、WASM及图片资源构成。在实际的游戏开发中，开发者存在需要对 minigame 目录中产物做一些定制化的修改，这些修改同时也要跟随项目内容一起进行代码托管。为此微信提供配置构建模板的能力。</p><h2 id="结构说明" tabindex="-1">结构说明 <a class="header-anchor" href="#结构说明" aria-label="Permalink to &quot;结构说明&quot;">​</a></h2><ul><li>在Package Manager导入WXSDK模式下的目录 <code>Packages/com.qq.weixin.minigame/Runtime/wechat-default</code></li><li>以及在Assets导入资源模式下的目录 <code>Assets/WX-WASM-SDK-V2/Runtime/wechat-default</code></li></ul><p>两个目录中的 <code>wechat-default</code> 是项目的基础模板，基础模板不建议开发者进行编辑，因为随着新的SDK的更新覆盖也将失去其修改内容。</p><p>开发者需要手动创建 <code>Assets/WX-WASM-SDK-V2/Editor/template</code> 目录，在 <code>template/minigame</code> 目录中的资源内容将会按照完整的层级结构覆盖到最终的 <code>minigame</code> 的导出目录中。</p><p><strong>直观的结构：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 游戏工程目录</span></span>
<span class="line"><span>Assets</span></span>
<span class="line"><span>├─ WX-WASM-SDK-V2</span></span>
<span class="line"><span>│  ├─ Editor</span></span>
<span class="line"><span>│  │  ├─ template      # 自行创建该目录内容</span></span>
<span class="line"><span>│  │  │  ├─ minigame</span></span>
<span class="line"><span>│  │  │  │  └─ ...     # 需要被覆盖的资源文件</span></span>
<span class="line"><span>│  │  │  └─ plugin.cs  # 可缺省创建，请阅读「构建模板前后不同时机的钩子」小节</span></span>
<span class="line"><span>│  │  └─ ...</span></span>
<span class="line"><span>│  └─ ...</span></span>
<span class="line"><span>└─ ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># WXSDK目录</span></span>
<span class="line"><span>Packages/com.qq.weixin.minigame 或 Assets/WX-WASM-SDK-V2</span></span>
<span class="line"><span>├─ Runtime</span></span>
<span class="line"><span>│  ├─ wechat-default   # 基础模板</span></span>
<span class="line"><span>│  └─ ...</span></span>
<span class="line"><span>└─ ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 导出资源目录（转换微信小游戏产物）</span></span>
<span class="line"><span>wechat</span></span>
<span class="line"><span>├─ minigame      # 基础模板 + template（合并结果）</span></span>
<span class="line"><span>│  └─ ...</span></span>
<span class="line"><span>└─ webgl</span></span></code></pre></div><p>值得注意的是，基础模板（wechat-default）并不是一个可以运行的标准JavaScript代码包，因为其中包含了大量的占位符将在导出时根据项目不同的实际情况作出替换，因此开发者在 <code>template/minigame</code> 创建用于覆盖的脚本时，应该以 <code>wechat-defalut</code> 中的脚本为修改基准，而不是导出的资源目录 <code>wechat/minigame</code> 中的资源作为参考。如此一来你自定义模板也将适应占位符的内容作出最终的结果变更。</p><h2 id="新版本sdk引起的冲突提醒" tabindex="-1">新版本SDK引起的冲突提醒 <a class="header-anchor" href="#新版本sdk引起的冲突提醒" aria-label="Permalink to &quot;新版本SDK引起的冲突提醒&quot;">​</a></h2><p>随着WXSDK的更新，如果你覆盖过 <code>wechat-defalut</code> 中的关键脚本，那么在新版本WXSDK导入后可能会引起部分功能表现异常，因此WXSDK将识别到关键脚本发生更新且被开发者自定义覆盖的情况下作出警告。（只会检查 .js .json 文件冲突，图片文件不会检查）</p><ul><li><p><strong>在WXSDK初始化时（引擎启动、或导入新的WXSDK时）作出检查</strong></p><p>检查异常时将在Unity控制台中给出详细的冲突信息；</p></li><li><p><strong>在导出微信小游戏时作出检查</strong></p><p>检查异常时将终止导出，并在Unity控制台中给出详细的冲突信息。</p></li></ul><h3 id="消除冲突提醒" tabindex="-1">消除冲突提醒 <a class="header-anchor" href="#消除冲突提醒" aria-label="Permalink to &quot;消除冲突提醒&quot;">​</a></h3><p>观察到异常提醒后开发者需要根据提醒前往对比冲突的脚本内容<strong>自行适配</strong>，当冲突的自定义模板文件较冲突前发生变化后提醒也将自动消除。</p><h2 id="json配置合并" tabindex="-1">JSON配置合并 <a class="header-anchor" href="#json配置合并" aria-label="Permalink to &quot;JSON配置合并&quot;">​</a></h2><p>时常开发者需要对 <code>game.json</code> 或 <code>project.config.json</code> 配置文件内容的做针对性的修改，当然使用后面小节提及的<a href="#构建模板前后不同时机的钩子">钩子能力</a>可以很万能的做出内容修改，但这毕竟需要开发者进行一定的代码编写。构建模板能力为开发者提供了一个JSON配置合并能力，只需要自定义模板目录放置JSON，并且只填写你关注的字段，构建模板能够自动帮你完成相同JSON文件的字段合并。</p><p>支持合并的文件为：</p><ul><li>game.json</li><li>project.config.json</li></ul><p>合并规则：Key-Value 字段将在<strong>末位</strong>节点新增或覆盖，Array 将整节点新增或覆盖。</p><p>例如：</p><p>自定义模板 <code>.../Editor/template/minigame/game.json</code> ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最终模板将新增该字段与值</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;UnityPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.52&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 最终模板仅变更该版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;subpackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最终模板会因该字段为数组类型，将整节点替换</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="构建模板前后不同时机的钩子" tabindex="-1">构建模板前后不同时机的钩子 <a class="header-anchor" href="#构建模板前后不同时机的钩子" aria-label="Permalink to &quot;构建模板前后不同时机的钩子&quot;">​</a></h2><p>有时候简单的覆盖可能并不能满足开发者复杂的修改需要，在构建时提供的不同时机钩子允许开发者使用C#代码来替换或变更是更灵活自由的方案，我们提供了 <a href="#buildtemplatehelper介绍">BuildTemplateHelper</a> 工具类来便捷的获得三个目录的绝对路径。</p><h3 id="钩子介绍" tabindex="-1">钩子介绍 <a class="header-anchor" href="#钩子介绍" aria-label="Permalink to &quot;钩子介绍&quot;">​</a></h3><p>在构建模板中通常需要以下几个阶段的钩子：</p><img src="`+p+`" width="90%"><h3 id="使用钩子" tabindex="-1">使用钩子 <a class="header-anchor" href="#使用钩子" aria-label="Permalink to &quot;使用钩子&quot;">​</a></h3><p>为了统一约定，推荐开发者创建位于 <code>Assets/WX-WASM-SDK-V2/Editor/template/plugin.cs</code> 脚本来执行构建模板相关的设计。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 游戏工程目录</span></span>
<span class="line"><span>Assets</span></span>
<span class="line"><span>├─ WX-WASM-SDK-V2</span></span>
<span class="line"><span>│  ├─ Editor</span></span>
<span class="line"><span>│  │  ├─ template</span></span>
<span class="line"><span>│  │  │  ├─ minigame</span></span>
<span class="line"><span>│  │  │  │  └─ ...</span></span>
<span class="line"><span>│  │  │  └─ plugin.cs  # 请创建该文件并编写钩子逻辑</span></span>
<span class="line"><span>│  │  └─ ...</span></span>
<span class="line"><span>│  └─ ...</span></span>
<span class="line"><span>└─ ...</span></span></code></pre></div><p>样例：</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// plugin.cs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeChatWASM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 构建生命周期回调钩子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 注意事项：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///     请创建脚本在 Editor (子)目录下；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///     回调钩子请使用 public 声明成员函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PluginDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LifeCycleBase</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterCopyDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // code...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;afterCopyDefault&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beforeCopyDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可使用 Exception 阻止继续构建导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Build Failed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beforeCoverTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 读取你的自定义模板目录并对其中的资源做动态修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildTemplateHelper.CustomTemplateDir;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          FileStream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Combine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tmp, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newFile.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileMode.Create, FileAccess.Write))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StreamWriter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StreamWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLineAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your Code Content.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 尽管你在导出期间动态的创建/修改了自定义模板中的资源</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在导出结束后WXSDK会自动恢复你的修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="buildtemplatehelper介绍" tabindex="-1">BuildTemplateHelper介绍 <a class="header-anchor" href="#buildtemplatehelper介绍" aria-label="Permalink to &quot;BuildTemplateHelper介绍&quot;">​</a></h3><p>BuildTemplateHelper 为你便捷的提供了各个目录的绝对路径：</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wechat-default（标准模板）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 位于 WXSDK 目录下标准模板绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baseDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildTemplateHelper.BaseDir;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// template（自定义模板）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 游戏工程中 Assets/WX-WASM-SDK-V2/Editor/template/minigame 绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> templateDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildTemplateHelper.CustomTemplateDir;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wechat/minigame（导出产物）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发者在导出面板配置的导出路径的微信开发者工具打开的 minigame(默认) 绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BuildTemplateHelper.DstMinigameDir;</span></span></code></pre></div><p>搭配<a href="#钩子介绍">钩子介绍</a>小节中的不同阶段，可以任意的对你的 <code>wechat-default（标准模板）</code>、<code>template（自定义模板）</code>、<code>wechat/minigame（导出产物）</code> 中进行新的脚本创建、已有脚本中局部代码的文本替换（例如使用正则替换）甚至是图片等资源的变更。</p><p>在导出期间修改你的自定义模板，在结束导出后不会真实的影响你的游戏工程内容，WXSDK已经为你还原，这对于你托管项目代码很便捷。</p>`,38),t=[e];function h(k,r,d,c,g,E){return i(),a("div",null,t)}const u=s(l,[["render",h]]);export{y as __pageData,u as default};
