import{_ as a,c as s,o as n,a4 as l}from"./chunks/framework.Br2U662V.js";const e="/minigame-unity-webgl-transform/assets/monitor-dialog.DkmXCKiX.png",i="/minigame-unity-webgl-transform/assets/monitor-console.DO12gbRg.png",o="/minigame-unity-webgl-transform/assets/detail-log.DbHrWCWi.png",t="/minigame-unity-webgl-transform/assets/network-profile.D4dnTarY.png",C=JSON.parse('{"title":"最佳实践检测工具","description":"","frontmatter":{},"headers":[],"relativePath":"Design/PerformanceMonitor.md","filePath":"Design/PerformanceMonitor.md"}'),p={name:"Design/PerformanceMonitor.md"},c=l(`<h1 id="最佳实践检测工具" tabindex="-1">最佳实践检测工具 <a class="header-anchor" href="#最佳实践检测工具" aria-label="Permalink to &quot;最佳实践检测工具&quot;">​</a></h1><ul><li><a href="#最佳实践检测工具">最佳实践检测工具</a><ul><li><a href="#作用">作用</a></li><li><a href="#如何使用">如何使用</a></li><li><a href="#检测示意">检测示意</a></li><li><a href="#检测指标解释">检测指标解释</a><ul><li><a href="#启动检测">启动检测</a><ul><li><a href="#监控指标">监控指标</a></li><li><a href="#优化建议概览">优化建议概览</a></li></ul></li><li><a href="#预下载检测">预下载检测</a><ul><li><a href="#监控指标-1">监控指标</a></li><li><a href="#优化建议概览-1">优化建议概览</a></li></ul></li><li><a href="#wasm分包检测">wasm分包检测</a><ul><li><a href="#监控指标-2">监控指标</a></li><li><a href="#优化建议概览-2">优化建议概览</a></li></ul></li><li><a href="#网络信息检测">网络信息检测</a><ul><li><a href="#监控指标-3">监控指标</a></li><li><a href="#优化建议概览-3">优化建议概览</a></li></ul></li><li><a href="#帧率检测">帧率检测</a><ul><li><a href="#监控指标-4">监控指标</a></li><li><a href="#优化建议概览-4">优化建议概览</a></li></ul></li></ul></li><li><a href="#优化分析工具">优化分析工具</a><ul><li><a href="#微信开发者工具">微信开发者工具</a></li></ul></li></ul></li></ul><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>为了使游戏达到比较好的性能表现，仍需要开发者结合游戏实际情况进行优化。平台针对启动和运行输出了大量优化手段，使用最佳实践检测，可帮助开发者在<strong>开发阶段</strong>针对问题进行优化</p><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><p>版本要求：<code>转换插件版本 &gt; 202305230000</code></p><p>导出小游戏默认在<strong>开发版和体验版</strong>开启检测，可通过<code>minigame/unity-namespace.js</code>修改</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最佳实践检测配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unityNamespace.monitorConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enableMonitor: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否开启检测（只影响开发版/体验版，线上版本不会检测）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fps: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 帧率低于此值的帧会被记录，用于分析长耗时帧，做了限帧的游戏应该适当调低</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  showResultAfterLaunch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否一直检测到游戏可交互完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  monitorDuration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅当showResultAfterLaunch=false时有效, 在引擎初始化完成(即callmain)后多长时间停止检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>默认检测条件如上。插件并不知道什么时候检测截止，可选择可交互上报后或在引擎初始化完成(<code>callmain</code>)后多少ms截止，根据游戏实际情况修改。</p><ol><li><p>有上报游戏可交互<a href="./ReportStartupStat.html#三、上报自定义阶段"><code>WX.ReportGameStart()</code></a>的游戏 应该设置<code>showResultAfterLaunch=true</code>，同时会忽略<code>monitorDuration</code>的值</p></li><li><p>未上报游戏可交互上报的游戏 应设置<code>showResultAfterLaunch=false</code>，此时根据<code>monitorDuration</code>的值截止检测</p></li></ol><h2 id="检测示意" tabindex="-1">检测示意 <a class="header-anchor" href="#检测示意" aria-label="Permalink to &quot;检测示意&quot;">​</a></h2><p>优化建议通过弹框提示，详细内容通过vconsole打印</p><ol><li>弹框提醒优化建议</li></ol><img src="`+e+'" width="500"><ol start="2"><li>console打印详细信息</li></ol><img src="'+i+'" width="500"><ol start="3"><li>console打印检测报告，可着重关注网络和卡帧的数据 <img src="'+o+`" width="500"></li></ol><h2 id="检测指标解释" tabindex="-1">检测指标解释 <a class="header-anchor" href="#检测指标解释" aria-label="Permalink to &quot;检测指标解释&quot;">​</a></h2><h3 id="启动检测" tabindex="-1">启动检测 <a class="header-anchor" href="#启动检测" aria-label="Permalink to &quot;启动检测&quot;">​</a></h3><p>检查框架启动阶段的耗时和资源大小</p><h4 id="监控指标" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  assetLoadCost: number; // 首资源包下载耗时，单位ms</span></span>
<span class="line"><span>  assetContentLength: number; // 首资源包大小(未压缩原始大小)，单位bytes</span></span>
<span class="line"><span>  useContentEncoding: boolean; // 首资源包是否开启服务器压缩</span></span>
<span class="line"><span>  wasmLoadCost: number; // wasm包下载耗时，ms</span></span>
<span class="line"><span>  wasmContentLength: number; // 启动下载的wasm包大小，单位bytes</span></span>
<span class="line"><span>  useCodeSplit: boolean; // 是否使用了wasm代码分包</span></span>
<span class="line"><span>  callmainCost: number; // 引擎初始化耗时，ms</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="优化建议概览" tabindex="-1">优化建议概览 <a class="header-anchor" href="#优化建议概览" aria-label="Permalink to &quot;优化建议概览&quot;">​</a></h4><p>当提示优化建议时，可采用对应的优化手段</p><ol><li><code>未使用wasm代码分包</code></li></ol><ul><li>条件: <code>useCodeSplit</code>为<code>false</code>，未使用wasm代码分包</li><li>优化手段: <a href="./WasmSplit.html">使用代码分包工具</a></li></ul><ol start="2"><li><code>首资源包较大</code></li></ol><ul><li>条件: <code>assetContentLength</code>超过15 * 1024 * 1024，即未压缩的首资源包超过15MB</li><li>优化手段: <a href="./StartupOptimization.html#_2-2-1-首资源包下载与体积">首资源包下载与体积</a></li></ul><ol start="3"><li><code>首资源包未开启服务器压缩</code></li></ol><ul><li>条件: <code>useContentEncoding</code>值为<code>false</code>，服务器未开启br或gzip</li><li>优化手段: <a href="./StartupOptimization.html#_2-2-1-首资源包下载与体积">首资源包下载与体积</a></li></ul><ol start="4"><li><code>callmain耗时较长，请用安卓cpuprofile分析热点函数</code></li></ol><ul><li>条件: iOS平台<code>callmainCost&gt;1500</code>或安卓平台<code>callmainCost&gt;3000</code></li><li>优化手段: <a href="./StartupOptimization.html#_2-2-3-引擎初始化与开发者首帧逻辑">引擎初始化与开发者首帧逻辑</a></li></ul><h3 id="预下载检测" tabindex="-1">预下载检测 <a class="header-anchor" href="#预下载检测" aria-label="Permalink to &quot;预下载检测&quot;">​</a></h3><p>检查预下载列表使用情况，分为引擎初始化完成(<code>callmain</code>)和检测完成时两个结果</p><blockquote><p>vconsole输出如下：<code>预下载基本信息: xxx , callmain完成时预下载信息: xxx</code>。其中xxx为js对象</p></blockquote><h4 id="监控指标-1" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标-1" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  loadedCount: number; // 已预下载完成数量</span></span>
<span class="line"><span>  loadingCount: number; // 正在预下载数量</span></span>
<span class="line"><span>  loadedSizeStr: string; // 已预下载完成大小字符串表示, eg: 10.1MB</span></span>
<span class="line"><span>  loadedSize: number; // 已预下载完成大小，bytes</span></span>
<span class="line"><span>  hitCacheCount: number; // 命中CDN缓存的数量</span></span>
<span class="line"><span>  useH2: boolean; // 是否启用HTTP2</span></span>
<span class="line"><span>  useContentEncoding: boolean; // 是否开启了服务器压缩</span></span>
<span class="line"><span>  preloadListLength: number; // 预下载资源个数</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="优化建议概览-1" tabindex="-1">优化建议概览 <a class="header-anchor" href="#优化建议概览-1" aria-label="Permalink to &quot;优化建议概览&quot;">​</a></h4><ol><li><code>未使用预下载能力</code></li></ol><ul><li>条件: <code>preloadListLength=0</code>; 即导出时未配置预下载列表</li><li>优化手段: <a href="./UsingPreload.html">使用预下载功能</a></li></ul><ol start="2"><li><code>已发起预下载，但未完成，请检查预下载资源是否过大，或是否下载过慢</code></li></ol><ul><li>条件: 引擎初始化完成时，<code>loadingCount != 0</code> 且 <code>loadedCount = 0</code>; 表示预下载已发起但未完成</li><li>优化手段: <a href="./UsingPreload.html#注意事项">使用预下载功能-注意事项第五点</a>，预下载文件体积不应过大，将优先需要使用的资源放到列表头部</li></ul><ol start="3"><li><code>预下载资源较小，请将大资源调整到预下载列表顶部</code></li></ol><ul><li>条件: 引擎初始化完成时 <code>loadedSize &lt; 1 * 1024 * 1024 (1MB)</code> 或停止检测时 <code>loadedSize &lt; 5 * 1024 * 1024 (5MB)</code></li><li>优化手段: 适当增加预下载资源大小</li></ul><ol start="4"><li><code>预下载资源个数较多</code></li></ol><ul><li>条件: <code>preloadListLength &gt; 15</code>；即预下载列表数大于15</li><li>优化手段: 减小预下载个数</li></ul><ol start="5"><li><code>预下载资源量较大</code></li></ol><ul><li>条件: <code>loadedSize &gt; 20 * 1024 * 1024 (20MB)</code>；即总预下载大小超过20MB</li><li>优化手段: 减小预下载资源量，过大的资源下载会造成带宽抢占，推荐由游戏自行控制加载时机</li></ul><h3 id="wasm分包检测" tabindex="-1">wasm分包检测 <a class="header-anchor" href="#wasm分包检测" aria-label="Permalink to &quot;wasm分包检测&quot;">​</a></h3><p>使用wasm代码分包后，检查wasm分包代码的加载时机，加载分包造成的卡顿时长，用来分析分包收集是否合理。若加载时机过早、阻塞时间过长，则需要优化。</p><blockquote><p>tips: 在新包做wasm分包期间可能会频繁提示优化建议</p></blockquote><h4 id="监控指标-2" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标-2" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  loadSubWasmPackageStartTime: number; // 开始下载wasm子包的时间，ms</span></span>
<span class="line"><span>  loadSubWasmPackageCostTime: number; // （仅安卓）加载子包耗时，ms</span></span>
<span class="line"><span>  loadDurationCallmain: boolean; // 是否在引擎初始化期间加载子包</span></span>
<span class="line"><span>  maxFetchPendingTime: number; // （仅iOS高性能）最大阻塞时间，ms。iOS高性能加载子包代码时会卡顿</span></span>
<span class="line"><span>  costTimeAfterCallmain: number; // 引擎初始化完成后多长时间开始加载子包，ms</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="优化建议概览-2" tabindex="-1">优化建议概览 <a class="header-anchor" href="#优化建议概览-2" aria-label="Permalink to &quot;优化建议概览&quot;">​</a></h4><ol><li><code>wasm子包在callmain期间加载，请使用分包工具继续收集</code></li></ol><ul><li>条件: <code>loadDurationCallmain=true</code></li><li>优化手段: 分包收集不足，使用分包工具<a href="./WasmSplit.html#迭代流程">继续迭代</a></li></ul><ol start="2"><li><code>wasm子包加载时机过早，请使用分包工具继续收集</code></li></ol><ul><li>条件: <code>costTimeAfterCallmain &lt; 30000 (30s)</code></li><li>优化手段: 游戏前期不应加载子包，当前期出现子包加载，则需要<a href="./WasmSplit.html#迭代流程">继续迭代</a></li></ul><ol start="3"><li><code>缺失函数过多，请使用分包工具继续收集</code></li></ol><ul><li>条件: <code>maxFetchPendingTime &gt; 2000</code></li><li>优化手段: <a href="./WasmSplit.html#ios-高性能模式收集很卡">iOS高性能模式收集</a> <a href="./WasmSplit.html#迭代流程">继续迭代</a></li></ul><h3 id="网络信息检测" tabindex="-1">网络信息检测 <a class="header-anchor" href="#网络信息检测" aria-label="Permalink to &quot;网络信息检测&quot;">​</a></h3><p>检查可缓存资源配置、CDN配置、并发数数、请求量、资源量</p><h4 id="监控指标-3" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标-3" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  useH2: boolean, // 是否开启HTTP2.0</span></span>
<span class="line"><span>  useContentEncoding: boolean, // 是否开启服务器压缩</span></span>
<span class="line"><span>  cacheSettings: boolean, // settings.json是否自动缓存</span></span>
<span class="line"><span>  cacheCatalog: boolean, // catalog.json是否自动缓存</span></span>
<span class="line"><span>  appendHashToCatalog: boolean, // catalog.json是否带上了hash或其他用于区分版本的信息</span></span>
<span class="line"><span>  requestCataHash: boolean, // 是否请求了catalog.hash文件用于资源热更新</span></span>
<span class="line"><span>  requestBundleSettings: boolean, // 是否请求了settings.json</span></span>
<span class="line"><span>  requestBundleCatalog: boolean, // 是否请求了catalog.json</span></span>
<span class="line"><span>  loadCount: number, // 已发起请求数</span></span>
<span class="line"><span>  loadedCount: number, // 已完成请求数</span></span>
<span class="line"><span>  loadedSizeStr: string, // 请求回包总大小的字符串表示，eg: 10.1MB</span></span>
<span class="line"><span>  loadedSize: number, // 请求回包总大小，bytes</span></span>
<span class="line"><span>  hitCacheCount: number, // 命中CDN缓存个数</span></span>
<span class="line"><span>  cacheableCount: number, // 可自动缓存个数</span></span>
<span class="line"><span>  loadFromCacheCount: number, // 使用本地缓存的个数</span></span>
<span class="line"><span>  startTime: number, // 首个请求开始时间</span></span>
<span class="line"><span>  duration: number, // 监控时长</span></span>
<span class="line"><span>  networkTime: number, // 有网络请求的总时长</span></span>
<span class="line"><span>  maxLoadingCount: number, // 最大并发数，基于业务侧统计，会大于10个，表示有请求会排队</span></span>
<span class="line"><span>  avgLoadingCount: number, // 平均并发数</span></span>
<span class="line"><span>  loadedTasks: IBaseRequestInfo[], // 已下载完成请求详细信息</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 请求详细信息如下</span></span>
<span class="line"><span>interface IBaseRequestInfo {</span></span>
<span class="line"><span>  url: string; // 请求URL</span></span>
<span class="line"><span>  startTime: number; // 请求开始时间</span></span>
<span class="line"><span>  statusCode?: number; // 服务器状态码</span></span>
<span class="line"><span>  enableContentEncoding?: boolean; // 是否开启了服务器压缩</span></span>
<span class="line"><span>  endTime?: number; // 请求介绍时间</span></span>
<span class="line"><span>  duration?: number; // 请求耗时</span></span>
<span class="line"><span>  protocol?: string; // 网络协议，h2或http1.1</span></span>
<span class="line"><span>  receivedBytedCount?: number; // 回包大小，bytes</span></span>
<span class="line"><span>  hitCache?: boolean; // 是否命中CDN缓存</span></span>
<span class="line"><span>  isReadFromCache?: boolean; // 是否使用本地缓存</span></span>
<span class="line"><span>  cacheable?: boolean; // 是否自动缓存的资源</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="优化建议概览-3" tabindex="-1">优化建议概览 <a class="header-anchor" href="#优化建议概览-3" aria-label="Permalink to &quot;优化建议概览&quot;">​</a></h4><ol><li><code>未开启http2</code></li></ol><ul><li>条件: <code>useH2=false</code></li><li>优化手段: 服务器开启HTTP2.0，通过多路复用和头部压缩的特性，能提升细碎文件的下载效率</li></ul><ol start="2"><li><code>未命中CDN缓存</code></li></ol><ul><li>条件: <code>hitCacheCount=0</code></li><li>优化手段: 发布新版本时，建议进行CDN预热，避免直接从源站拉取资源</li></ul><ol start="3"><li><code>请勿缓存settings.json</code></li></ol><ul><li>条件: <code>requestBundleSettings=true</code> 且 <code>cacheSettings=true</code></li><li>优化手段: Addressables的<code>settings.json</code>文件用来记录打包配置，不应该缓存到本地。取消此文件的自动缓存，<a href="./FileCache.html#二、哪些资源会自动缓存">哪些资源会自动缓存</a></li></ul><ol start="4"><li><code>可将catalog.json配置为可缓存文件</code></li></ol><ul><li>条件: <code>requestBundleCatalog=true</code> 且 <code>cacheCatalog=false</code></li><li>优化手段: Addressables的<code>catalog.json</code>记录了所有资源文件的描述信息和依赖关系，一般大小较大，推荐缓存到本地，<a href="./FileCache.html#二、哪些资源会自动缓存">哪些资源会自动缓存</a></li></ul><ol start="5"><li><code>catalog.json被缓存且无hash/版本信息, 会导致无法更新</code></li></ol><ul><li>条件: <code>requestBundleCatalog=true</code> 且 <code>cacheCatalog=true</code> 且 <code>appendHashToCatalog=false</code></li><li>优化手段: <code>catalog.json</code>缓存到本地若无版本标识，会导致无法更新到最新版本, <a href="./FileCache.html#三、缓存规则">缓存规则</a></li></ul><ol start="6"><li><code>请勿请求catalog.hash来做资源热更新，小游戏平台不支持</code></li></ol><ul><li>条件: <code>requestCataHash=true</code></li><li>优化手段: <code>catalog.hash</code>记录了<code>catalog.json</code>的hash，用来热更新资源，但小游戏平台不支持，推荐使用<code>catalog.json</code>文件名带hash的方式来管理catalog版本，参见建议第五点</li></ul><ol start="7"><li><code>可缓存文件过少，检查缓存配置</code></li></ol><ul><li>条件: <code>cacheableCount &lt; loadCount / 2</code>，可缓存资源小于总请求数的一半</li><li>优化手段: 检查<a href="./FileCache.html#二、哪些资源会自动缓存">缓存配置</a>，是否资源文件大部分未缓存。提高可缓存数量</li></ul><ol start="8"><li><code>网络并发数过少</code></li></ol><ul><li>条件: <code>avgLoadingCount &lt; 5</code>，平均并发数小于5</li><li>优化手段: 并发数较少可能导致细碎文件较多时网络利用率不高，业务侧提高请求并发数</li></ul><ol start="9"><li><code>网络未充分利用</code></li></ol><ul><li>条件: <code>networkTime / duration &lt; 0.7</code>, 网络时间占监控时长占比不足70%</li><li>优化建议: 可能由于游戏业务初始化逻辑较重，cpu繁忙，在cpu繁忙时未充分利用网络空闲；建议：在开始长耗时逻辑前，发起资源下载任务，充分利用网络。可使用<a href="#微信开发者工具">微信开发者工具辅助分析</a></li></ul><h3 id="帧率检测" tabindex="-1">帧率检测 <a class="header-anchor" href="#帧率检测" aria-label="Permalink to &quot;帧率检测&quot;">​</a></h3><p>检查是否有大长帧，标记大长帧出现的位置，辅助定位是cpu耗时还是网络耗时导致启动慢</p><h4 id="监控指标-4" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标-4" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  frames: string[]; // 长耗时的帧</span></span>
<span class="line"><span>  frameCount: number; // 长耗时帧的个数</span></span>
<span class="line"><span>  longestFrame: { // 最长帧信息</span></span>
<span class="line"><span>      frame: string; // 帧数</span></span>
<span class="line"><span>      frameCost: number; // 单帧耗时, ms</span></span>
<span class="line"><span>      runtime: number; // 游戏运行时长, ms</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>  frameInfo: IWrongFrame; // 长耗时帧信息</span></span>
<span class="line"><span>  totalJankTime: number; // 总卡帧时长, ms</span></span>
<span class="line"><span>  currentRuntime: number; // 当前游戏运行时长, ms</span></span>
<span class="line"><span>  jankRate: number; // 卡顿率</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="优化建议概览-4" tabindex="-1">优化建议概览 <a class="header-anchor" href="#优化建议概览-4" aria-label="Permalink to &quot;优化建议概览&quot;">​</a></h4><p>卡帧问题，均需要使用cpuprofile定位。<a href="./AndroidProfile.html">使用Android CPU Profiler性能调优</a>、<a href="./UnityProfiler.html">使用Unity Profiler性能调优</a></p><ol><li><code>存在长耗时帧cost=xxxms,runtime=xxxms</code></li></ol><ul><li>条件: <code>longestFrame.frameCost &gt; 1000 (1s)</code></li></ul><ol start="2"><li><code>总卡顿时长xxxms</code></li></ol><ul><li>条件: <code>totalJankTime &gt; 5000 (5s)</code></li></ul><ol start="3"><li><code>卡顿时长占比xx%</code></li></ol><ul><li>条件: <code>jankRate &gt; 0.3</code></li></ul><h2 id="优化分析工具" tabindex="-1">优化分析工具 <a class="header-anchor" href="#优化分析工具" aria-label="Permalink to &quot;优化分析工具&quot;">​</a></h2><h3 id="微信开发者工具" tabindex="-1">微信开发者工具 <a class="header-anchor" href="#微信开发者工具" aria-label="Permalink to &quot;微信开发者工具&quot;">​</a></h3><img src="`+t+'"><ul><li>step1: 点击调试器-performance</li><li>step2: 点击录制按钮</li><li>step3: 分析网络并发和网络耗时</li><li>step4: 查看每帧耗时，与此帧网络并发</li></ul>',99),r=[c];function d(h,u,m,g,b,k){return n(),s("div",null,r)}const q=a(p,[["render",d]]);export{C as __pageData,q as default};
