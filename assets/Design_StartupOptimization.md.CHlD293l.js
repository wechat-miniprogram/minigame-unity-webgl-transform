import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.Br2U662V.js";const l="/minigame-unity-webgl-transform/assets/startupop1.BD5F2llA.png",r="/minigame-unity-webgl-transform/assets/startupop2.ClyZL3O9.png",f=JSON.parse('{"title":"提升Unity WebGL游戏启动速度","description":"","frontmatter":{},"headers":[],"relativePath":"Design/StartupOptimization.md","filePath":"Design/StartupOptimization.md"}'),s={name:"Design/StartupOptimization.md"},o=i('<h1 id="提升unity-webgl游戏启动速度" tabindex="-1">提升Unity WebGL游戏启动速度 <a class="header-anchor" href="#提升unity-webgl游戏启动速度" aria-label="Permalink to &quot;提升Unity WebGL游戏启动速度&quot;">​</a></h1><h2 id="一、-为什么要做启动优化" tabindex="-1">一、 为什么要做启动优化 <a class="header-anchor" href="#一、-为什么要做启动优化" aria-label="Permalink to &quot;一、 为什么要做启动优化&quot;">​</a></h2><h3 id="_1-1-小游戏与手游app的启动差异" tabindex="-1">1.1 小游戏与手游APP的启动差异 <a class="header-anchor" href="#_1-1-小游戏与手游app的启动差异" aria-label="Permalink to &quot;1.1  小游戏与手游APP的启动差异&quot;">​</a></h3><p>微信小游戏具有“即开即用“的特性，手游APP则往往需要较长时间的下载。小游戏玩家对于启动时长更为敏感，因此过长的启动时间将导致用户显著流失。</p><h3 id="_1-2-优化的目标与标准" tabindex="-1">1.2 优化的目标与标准 <a class="header-anchor" href="#_1-2-优化的目标与标准" aria-label="Permalink to &quot;1.2 优化的目标与标准&quot;">​</a></h3><p>目前普通小游戏普遍启动时间为7~10s，而如果不经优化的Unity WebGL游戏启动会是该时间的2-3倍以上。我们建议开发者将启动优化作为上线前最为重要的事项。</p><h2 id="二、分析小游戏启动速度" tabindex="-1">二、分析小游戏启动速度 <a class="header-anchor" href="#二、分析小游戏启动速度" aria-label="Permalink to &quot;二、分析小游戏启动速度&quot;">​</a></h2><h3 id="_2-1-查看启动耗时" tabindex="-1">2.1. 查看启动耗时 <a class="header-anchor" href="#_2-1-查看启动耗时" aria-label="Permalink to &quot;2.1. 查看启动耗时&quot;">​</a></h3><p>通过修改unity-namespace.js中hideTimeLogModal为false，显示timelog开发者可以看到小游戏目前的启动首屏时长：</p><img src="'+l+'" width="400"><p>要知道各个阶段的含义，我们必要理解<a href="./Startup.html">启动流程</a></p><p>小游戏启动主要由三部分影响：</p><blockquote><ol><li>首包资源下载</li><li>WASM代码下载和编译</li><li>引擎初始化与开发者首帧逻辑</li></ol></blockquote><p><strong>建议首屏启动时间控制在5~10s甚至更短</strong>。</p><h3 id="_2-2-分阶段耗时" tabindex="-1">2.2 分阶段耗时 <a class="header-anchor" href="#_2-2-分阶段耗时" aria-label="Permalink to &quot;2.2 分阶段耗时&quot;">​</a></h3><h3 id="_2-2-1-首资源包下载与体积" tabindex="-1">2.2.1 首资源包下载与体积 <a class="header-anchor" href="#_2-2-1-首资源包下载与体积" aria-label="Permalink to &quot;2.2.1 首资源包下载与体积&quot;">​</a></h3><p>首包资源(webgl/Build目录下的data文件)主要有以下组成：</p><ul><li>unity default resources文件，引擎默认资源，如Arial字体，默认mesh，纹理等</li><li>il2cppmetadata， C#代码使用il2Cpp生成cpp代码时，生成的类，方法等信息</li><li>unity builtin_extra, always include的shader</li><li>BuildSettings中所有active的场景</li><li>Resources文件夹中的资源，以及其中的资源引用到的其他资源</li><li>全局设置及引用到的资源，如splash图片等</li></ul><p>可使用<a href="https://github.com/Perfare/AssetStudio" target="_blank" rel="noreferrer">AssetStudio</a>查看文件内的所有资源。</p><p>首次下载或更新首资源包时，需要在小游戏的启动前期下载，因此文件大小极为影响游戏的启动速度。</p><blockquote><ol><li>网络条件绝大部分为wifi或4G(另，微信广告可指定网络条件)</li><li>玩家平均下载速度约2MB/s</li><li>微信用户存在不少&lt;300KB/s的低网速玩家</li><li>务必对首资源包压缩： 转换面板勾选“压缩首资源包” 或 CDN管理后端针对首资源包(后缀.txt)“开启gzip/br压缩“</li><li>中文显示需要自定义字体，打包在首资源包或Bundle；<em><strong>请尽量使用2~3MB以内的精简字体以免影响游戏启动速度</strong></em></li></ol></blockquote><p>建议： 务必对首资源包进行压缩传输，使用微信开发者工具的network标签确认传输量，网络传输大小应控制在<strong>3~5MB</strong>。</p><h3 id="_2-2-2-wasm代码下载和编译" tabindex="-1">2.2.2 WASM代码下载和编译 <a class="header-anchor" href="#_2-2-2-wasm代码下载和编译" aria-label="Permalink to &quot;2.2.2 WASM代码下载和编译&quot;">​</a></h3><p>WASM分包的大小会直接影响代码下载时长以及程序初始化编译的时间，关于WASM代码对启动速度的影响，开发者需要注意：</p><blockquote><ol><li>转换工具会将Unity WebGL包自动进行br压缩(压缩至原code包的20%)</li><li>WASM代码下载与首包资源并行下载，因此占用下载带宽</li><li>WASM编译需要CPU资源，对于低端机来说时间依然可观</li></ol></blockquote><p>我们建议原始代码包(webgl/Build目录下的code文件)<strong>不超过30MB</strong>, 建议开发者<strong>勾选&quot;Strip Engine Code&quot;并设置&quot;Managed Stripping Level&quot;为High</strong>。同时，强烈建议开发者可以使用<a href="./WasmSplit.html">代码分包</a>工具将代码包减少到原始尺寸的到1/3。如果使用Unity2021以上版本，可更改PlayerSettings面板IL2CPP选项为更小尺寸(SIZE)以减少函数量。</p><h3 id="_2-2-3-引擎初始化与开发者首帧逻辑" tabindex="-1">2.2.3 引擎初始化与开发者首帧逻辑 <a class="header-anchor" href="#_2-2-3-引擎初始化与开发者首帧逻辑" aria-label="Permalink to &quot;2.2.3 引擎初始化与开发者首帧逻辑&quot;">​</a></h3><p>在timelog中呈现的首场景耗时即为引擎初始化与开发者首帧逻辑，关于该阶段耗时，开发者需要注意的是：</p><blockquote><ol><li>MonoBehaviour脚本的首帧Start/Awake应足够少逻辑，优先将画面呈现</li><li>初始场景不宜过大，通常呈现Splah场景即可</li><li>初始场景中需要后续主场景或配置加载时可采取分帧策略，切勿在Start/Awake阻塞。</li><li>对于计算耗时 请<a href="./AndroidProfile.html">使用Android CPU Profiler性能调优</a>分析每一帧的耗时部分。</li></ol></blockquote><p>我们建议开发者<a href="./UsingPreload.html">使用预下载功能</a>，该功能可以利用此阶段的网络空闲期进行资源下载。</p><h3 id="_2-2-4-游戏内资源按需加载" tabindex="-1">2.2.4 游戏内资源按需加载 <a class="header-anchor" href="#_2-2-4-游戏内资源按需加载" aria-label="Permalink to &quot;2.2.4 游戏内资源按需加载&quot;">​</a></h3><p>前面我们提到开发者需要将资源从首包分离以较少首屏加载时间，同理，而对于其余的资源开发者最好使用按需加载的方式进行加载，减少玩家进行核心玩法的等待时间。 优化可参考 <a href="./UsingAddressable.html">使用Addressable Assets System</a>或<a href="./UsingAssetBundle.html">AssetBundle</a>进行资源按需加载。</p><h3 id="_2-3-优化总览" tabindex="-1">2.3 优化总览 <a class="header-anchor" href="#_2-3-优化总览" aria-label="Permalink to &quot;2.3 优化总览&quot;">​</a></h3><p>我们总结下启动时序以及开发者、平台提升启动性能的优化事项： <img src="'+r+'"></p><h2 id="三、常用启动优化技巧" tabindex="-1">三、常用启动优化技巧 <a class="header-anchor" href="#三、常用启动优化技巧" aria-label="Permalink to &quot;三、常用启动优化技巧&quot;">​</a></h2><p>当分析出小游戏需要进行启动优化时，请继续阅读：</p><ul><li><a href="./UsingAddressable.html">使用Addressable Assets System进行资源按需加载</a></li><li><a href="./FirstSceneOptimization.html">首场景启动优化</a></li><li><a href="./AsyncShaderWarmup.html">Shader 异步 Warmup</a></li></ul><h2 id="四、常用启动优化工具" tabindex="-1">四、常用启动优化工具 <a class="header-anchor" href="#四、常用启动优化工具" aria-label="Permalink to &quot;四、常用启动优化工具&quot;">​</a></h2><h3 id="_4-1-assetstudio-推荐" tabindex="-1">4.1. AssetStudio(推荐) <a class="header-anchor" href="#_4-1-assetstudio-推荐" aria-label="Permalink to &quot;4.1. AssetStudio(推荐)&quot;">​</a></h3><p><a href="https://github.com/Perfare/AssetStudio" target="_blank" rel="noreferrer">https://github.com/Perfare/AssetStudio</a></p><p>一款开源的资源查看工具，可以检查data首包以及AssetsBundle(或新Addressable)的资源内容，对于分析打包的资源正确性和冗余具有很好的帮助。</p><h3 id="_4-2-buildreporttool-推荐" tabindex="-1">4.2 BuildReportTool(推荐) <a class="header-anchor" href="#_4-2-buildreporttool-推荐" aria-label="Permalink to &quot;4.2 BuildReportTool(推荐)&quot;">​</a></h3><p><a href="https://assetstore.unity.com/packages/tools/utilities/build-report-tool-8162?locale=zh-CN" target="_blank" rel="noreferrer">https://assetstore.unity.com/packages/tools/utilities/build-report-tool-8162?locale=zh-CN</a></p><p>很好的前端用于查看Unity编译信息，BRT显示了编译时包括的每个资源占用的存储空间以及未使用资源情况。</p><h3 id="_4-3-asset-hunter" tabindex="-1">4.3 Asset Hunter <a class="header-anchor" href="#_4-3-asset-hunter" aria-label="Permalink to &quot;4.3 Asset Hunter&quot;">​</a></h3><p><a href="https://assetstore.unity.com/packages/tools/utilities/asset-hunter-pro-135296" target="_blank" rel="noreferrer">https://assetstore.unity.com/packages/tools/utilities/asset-hunter-pro-135296</a></p><p>资源清理插件，可将项目中无用资源清理</p><h3 id="_4-4-unity-addressable-assets-system" tabindex="-1">4.4 Unity Addressable Assets System <a class="header-anchor" href="#_4-4-unity-addressable-assets-system" aria-label="Permalink to &quot;4.4 Unity Addressable Assets System&quot;">​</a></h3><p><a href="https://docs.unity3d.com/Packages/com.unity.addressables@1.16/manual/index.html" target="_blank" rel="noreferrer">https://docs.unity3d.com/Packages/com.unity.addressables@1.16/manual/index.html</a> Unity全新资源管理流程</p>',49),n=[o];function h(d,u,p,c,m,b){return t(),e("div",null,n)}const g=a(s,[["render",h]]);export{f as __pageData,g as default};
