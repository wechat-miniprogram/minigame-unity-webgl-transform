import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Br2U662V.js";const t="/minigame-unity-webgl-transform/assets/saveArea.BbgprMYb.png",y=JSON.parse('{"title":"屏幕适配","description":"","frontmatter":{},"headers":[],"relativePath":"Design/fixScreen.md","filePath":"Design/fixScreen.md"}'),h={name:"Design/fixScreen.md"},e=n(`<h1 id="屏幕适配" tabindex="-1">屏幕适配 <a class="header-anchor" href="#屏幕适配" aria-label="Permalink to &quot;屏幕适配&quot;">​</a></h1><h2 id="安全区域适配" tabindex="-1">安全区域适配 <a class="header-anchor" href="#安全区域适配" aria-label="Permalink to &quot;安全区域适配&quot;">​</a></h2><p>小游戏的屏幕适配与 unity 游戏适配常见手机屏幕没有区别。常见的适配方式都可以在小游中使用。区别的是一些屏幕信息的获取。 如安全区域的获取需调用 WX.GetWindowInfo 得到其中的安全区域。 如下是适配刘海屏（这里以竖屏游戏按高度适配为例）的示例：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetWindowInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.safeArea.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.windowHeight;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Rootrect初始时设置其Anchor，使其与父节点一样大，也就是屏幕的大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调整屏幕移到刘海屏下面,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Rootrect.anchorMin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.safeArea.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.windowWidth, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.safeArea.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info.windowHeight);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新计算缩放，让高度占满刘海屏以下的区域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cs.referenceResolution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cs.referenceResolution.x, cs.referenceResolution.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">py));</span></span></code></pre></div><p><img src="`+t+`" alt="安全区域"> 从 <a href="https://developers.weixin.qq.com/minigame/dev/api/base/system/wx.getWindowInfo.html" target="_blank" rel="noreferrer">wx.getWindowInfo</a> 中获取的安全区域的数值，需要乘以 pixelRatio 才为 Unity 中的大小，而且手机屏幕左上角为（0，0）</p><h2 id="高分辨屏下模糊问题" tabindex="-1">高分辨屏下模糊问题 <a class="header-anchor" href="#高分辨屏下模糊问题" aria-label="Permalink to &quot;高分辨屏下模糊问题&quot;">​</a></h2><p>因为 Unity 2019.3 之前的版本对高分辨屏适配不是很好。会出现画面模糊的情况，所以最好选择<code>Unity 2019.3</code>之后的版本来构建你的游戏。如果游戏不能升级版本，也可以引入<a href="./WX_SDK.html">SDK</a>，在初始化 SDK 后，SDK 会自动对页面做一个兼容适配，避免模糊的问题。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//初始化SDK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WX.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitSDK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的主逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,8),l=[e];function p(k,r,d,o,E,g){return a(),i("div",null,l)}const f=s(h,[["render",p]]);export{y as __pageData,f as default};
