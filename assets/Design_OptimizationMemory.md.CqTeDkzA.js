import{_ as e,c as a,a as l,a4 as i,o as t}from"./chunks/framework.Br2U662V.js";const r="/minigame-unity-webgl-transform/assets/optimizationMemory1.CpSWLJ8m.png",o="/minigame-unity-webgl-transform/assets/optimizationMemory10.D-SZ1dZe.png",n="/minigame-unity-webgl-transform/assets/optimizationMemory2.aE_-ogAD.png",s="/minigame-unity-webgl-transform/assets/optimizationMemory3.CEtq636B.png",p="/minigame-unity-webgl-transform/assets/optimizationMemory4.ymgsNGzl.png",m="/minigame-unity-webgl-transform/assets/optimizationMemory6.8iXuz3Gb.png",h="/minigame-unity-webgl-transform/assets/optimizationMemory11.BB2iD3xR.png",d="/minigame-unity-webgl-transform/assets/optimizationMemory12.C9Wsxuea.png",u="/minigame-unity-webgl-transform/assets/optimizationMemory5.CzK1696v.png",A=JSON.parse('{"title":"优化Unity WebGL的内存","description":"","frontmatter":{},"headers":[],"relativePath":"Design/OptimizationMemory.md","filePath":"Design/OptimizationMemory.md"}'),y={name:"Design/OptimizationMemory.md"},c=i('<h1 id="优化unity-webgl的内存" tabindex="-1">优化Unity WebGL的内存 <a class="header-anchor" href="#优化unity-webgl的内存" aria-label="Permalink to &quot;优化Unity WebGL的内存&quot;">​</a></h1><h2 id="一、内存与oom" tabindex="-1">一、内存与OOM <a class="header-anchor" href="#一、内存与oom" aria-label="Permalink to &quot;一、内存与OOM&quot;">​</a></h2><p>Unity WebGL游戏通常比普通H5(JS)游戏占用更大的内存，在操作系统的控制策略下超出阈值时非常容易被OOM。</p><p>为了提高游戏在中低端机型的稳定性，内存优化极为重要。那么，多大的内存是合理的呢？ 我们建议内存峰值控制在以下范围(<a href="./PerfMeasure.html">性能评估标准</a>)：</p><ol><li>Android: 低档机 &lt; 1.2G, 中高档机 &lt; 1.5G</li><li>iOS: 低档机 &lt; 1G, 中高档机 &lt; 1.4G</li></ol><p>相对而言，Android机型的内存更为宽松。</p><p>iOS低档机为iPhone 6sp/7/8等RAM 2G机型为主，中高档机为iPhone 7P/8P/iPhoneX/iPhone11等RAM 3G或以上机型。</p><h2 id="二、unity-webgl适配小游戏的内存结构" tabindex="-1">二、Unity WebGL适配小游戏的内存结构 <a class="header-anchor" href="#二、unity-webgl适配小游戏的内存结构" aria-label="Permalink to &quot;二、Unity WebGL适配小游戏的内存结构&quot;">​</a></h2><p>Unity WebGL内存结构可先参考：</p><p><a href="https://blogs.unity3d.com/2016/09/20/understanding-memory-in-unity-webgl/?_ga=2.221731928.1756133398.1638172136-1917727044.1634213664" target="_blank" rel="noreferrer">Unity博客：了解 Unity WebGL 中的内存 (Understanding Memory in Unity WebGL)</a></p><p><a href="https://blog.unity.com/technology/unity-webgl-memory-the-unity-heap" target="_blank" rel="noreferrer">Unity博客：Unity WebGL 内存：Unity 堆 (Unity WebGL Memory: The Unity Heap)</a></p><img src="'+r+'" width="1080">',12),f=i('<p>适配在小游戏后，小游戏进程也就成为了“容器”，虽然不再是标准的浏览器，但内存组成结构与上图基本一致，典型游戏的内存占用如下图所示：</p><img src="'+o+'" width="800"><ul><li><p>基础库+Canvas：在小游戏环境中并不存在DOM，但依然会存在一些基本消耗，比如小游戏公共库，Canvas画布等。典型地，<em><strong>小游戏公共库约占用内存100~150MB，Canvas 画布与设备物理分辨率相关</strong></em>，比如iPhone 11 Promax占用约80MB。</p></li><li><p>Unity Heap: 托管堆、本机堆与原生插件底层内存。举例，游戏逻辑分配的C#对象等托管内存、Unity管理的AssetBundle和场景结构等本机内存、第三方原生插件(如lua)调用的malloc分配。</p></li><li><p>WASM编译: 代码编译与运行时指令优化产生的内存，在Android v8、iOS JavascriptCore中还需要大量内存进行JIT优化</p></li><li><p>GPU内存：纹理或模型Upload GPU之后的显存占用, 由于Unity2021之前不支持压缩纹理，纹理内存会造成明显膨胀。</p></li><li><p>音频：Unity将音频传递给容器（浏览器或小游戏）后，播放音频时将占用的内存。目前UnityAudio将自动适配微信小游戏，<em><strong>特别地请避免使用fmod播放长音频</strong></em>。</p></li><li><p>其他：</p><ul><li>Emscripten使用<a href="https://emscripten.org/docs/api_reference/Filesystem-API.html" target="_blank" rel="noreferrer">文件系统</a>模拟Linux/POSIX接口，<em><strong>代价是占用与文件同等大小的内存</strong></em>。 请勿使用首资源包、Addressable Cache机制、WWW.LoadFromCacheOrDownload等Cache API***</li><li>网络请求造成的浏览器端JS临时内存、垃圾回收</li><li></li></ul></li></ul><h2 id="三、内存查看工具" tabindex="-1">三、内存查看工具 <a class="header-anchor" href="#三、内存查看工具" aria-label="Permalink to &quot;三、内存查看工具&quot;">​</a></h2><p>我们从大到小各个角度去监控和分析游戏的内存情况：</p><p>进程级别: Perfdog、Android Studio、 Mac Xcode Instrument</p><p>UnityHeap(CPU主内存): 性能面板、ProfilingMemory、JavaScript Heap</p><p>引擎与资源：UnityProfiler</p><h3 id="_3-1-进程总内存" tabindex="-1">3.1 进程总内存 <a class="header-anchor" href="#_3-1-进程总内存" aria-label="Permalink to &quot;3.1 进程总内存&quot;">​</a></h3><p>查看总内存时，我们需要先确定监控的小游戏进程名称：</p><ul><li>Android：WeChat AppBrand1/2</li><li>iOS:普通模式WeChat、高性能模式(WebContent)</li></ul><h4 id="instruments-in-xcode-ios" tabindex="-1">Instruments in Xcode(iOS) <a class="header-anchor" href="#instruments-in-xcode-ios" aria-label="Permalink to &quot;Instruments in Xcode(iOS)&quot;">​</a></h4><img src="'+n+'" width="800"><p>使用“Activity Monitor”，选择对应的设备-all processes-捕捉，即可看到所有进程的CPU与内存情况. <img src="'+s+'" width="800"></p><h4 id="perfdog-android-or-ios" tabindex="-1">Perfdog（Android or iOS） <a class="header-anchor" href="#perfdog-android-or-ios" aria-label="Permalink to &quot;Perfdog（Android or iOS）&quot;">​</a></h4><p>使用<a href="https://perfdog.qq.com" target="_blank" rel="noreferrer">Perfdog</a>选择对应的设置-进程名，即可看到相关性能数据，iOS设备应以紫色的XcodeMemory为准。 <img src="'+p+'" width="800"></p><h3 id="_3-2-unityheap" tabindex="-1">3.2 UnityHeap <a class="header-anchor" href="#_3-2-unityheap" aria-label="Permalink to &quot;3.2 UnityHeap&quot;">​</a></h3><p>UnityHeap非常关键，典型由以下几部分组成：</p><ul><li>托管堆， C#对象托管对象、游戏状态</li><li>本机堆， Unity Native产生，引擎内部对象</li><li>原生内存，第三方插件（如lua）直接调用malloc产生</li></ul><p>分析手段：</p><ol><li>勾选转换面板&quot;ProfilingMemory&quot;</li><li>导出面板勾选“显示性能面板”或unity-namespace.js中enableProfileStats变量打开性能面板(注意：提审版本请勿显示). 游戏左上角显示Performence Stats性能面板</li></ol><img src="'+m+'" width="600"><p>每项指标有三个数值：当前帧、最小值、最大值。</p><p><strong>通常而言：MonoHeap + NativeReserverd + 原生插件内存 = DynamicMemory， 因此开发者需要关注这几部分内存。</strong></p><p>Unity引擎视角：</p><ul><li><p>MonoHeapReserved: 托管堆的内存预留内存</p></li><li><p>MonoHeap：托管堆(如C#业务逻辑)当前的内存使用量</p></li><li><p>NativeReserverd：本机堆(Native)内存分配峰值</p></li><li><p>NativeUnused：本机堆(Native)空闲内存值</p></li><li><p>NativeAllocated：本机堆(Native)当前的内存使用量</p><p>注意：第三方原生插件(如lua)分配内存并未呈现，需开发者自行分析。</p></li></ul><p>底层分配器视角：</p><ul><li>TotalHeapMemory: UnityHeap总预分配内存大小</li><li>DynamicMemory：UnityHeap使用上限</li><li>UsedHeapMemory：UnityHeap真实使用量</li><li>UnAllocatedMemory：UnityHeap预留量</li></ul><img src="'+h+'" width="600"><p>底层分配器：</p><ul><li>绿色为空闲内存或碎片，底层分配器会尽量复用</li><li>白色为预留部分，可被使用</li><li>其他颜色，已被业务使用</li></ul><h3 id="_3-3-profilingmemory" tabindex="-1">3.3 ProfilingMemory <a class="header-anchor" href="#_3-3-profilingmemory" aria-label="Permalink to &quot;3.3 ProfilingMemory&quot;">​</a></h3><p>ProfilingMemory可以分析UnityHeap底层分配器的分配细节，任何分配都会产生记录，因此我们可以通过该能力分析更详细具体的分配行为。</p><p>关于该能力的使用请查阅<a href="./UsingMemoryProfiler.html">使用ProfilingMemory分析内存</a></p><h3 id="_3-4-unity-profiler" tabindex="-1">3.4 Unity Profiler <a class="header-anchor" href="#_3-4-unity-profiler" aria-label="Permalink to &quot;3.4 Unity Profiler&quot;">​</a></h3><p>当发现UnityHeap(尤其是Native)占用比较高时，可通过UnityProfiler进一步分析问题所在。关于该工具在微信小游戏的使用请查阅<a href="./UnityProfiler.html">使用 Unity Profiler 性能调优</a>，推荐使用Unity InstantGame版本增强的Profiler功能，下载地址请查阅<a href="./UnityVersion.html">推荐引擎版本</a>。</p><img src="'+d+'" width="400"><h3 id="_3-5-javascript-heap" tabindex="-1">3.5 JavaScript Heap <a class="header-anchor" href="#_3-5-javascript-heap" aria-label="Permalink to &quot;3.5 JavaScript Heap&quot;">​</a></h3><p>由于Unity WebGL是托管在浏览器环境中，因此JavaScript Heap包含了大部分（并非全部）我们关注的内存， 通常我们可以使用浏览器自带的内存工具。 但需要注意的是<em><strong>JavaScript Heap通常无法看出具体内存使用，发现该部分内存明显大于我们预留的UnityHeap，应检查是否有使用Unity Cache进行文件缓存，务必避免这样使用。</strong></em></p><h4 id="微信开发者工具" tabindex="-1">微信开发者工具 <a class="header-anchor" href="#微信开发者工具" aria-label="Permalink to &quot;微信开发者工具&quot;">​</a></h4><h4 id="firefox-memory-pc" tabindex="-1">FireFox Memory(PC) <a class="header-anchor" href="#firefox-memory-pc" aria-label="Permalink to &quot;FireFox Memory(PC)&quot;">​</a></h4><h4 id="ios-safari-timeline-pc-or-ios" tabindex="-1">iOS Safari Timeline(PC or iOS) <a class="header-anchor" href="#ios-safari-timeline-pc-or-ios" aria-label="Permalink to &quot;iOS Safari Timeline(PC or iOS)&quot;">​</a></h4><img src="'+u+'" width="1080"><h3 id="四、内存优化方案" tabindex="-1">四、内存优化方案 <a class="header-anchor" href="#四、内存优化方案" aria-label="Permalink to &quot;四、内存优化方案&quot;">​</a></h3><p>计算公式： 小游戏基础库 + Cavnas + 编译内存 + UnityHeap + Gfx显存 + 音频 + JavaScript内存。 UnityHeap = max(托管/Mono内存) + max(Native/Reserved内存 + C原生代码内存)</p><p>以iOS高性能模式为例，一款代码(导出目录/webgl/Build/xxx.code.unityweb或code.wasm)大小为30MB的游戏占用内存为： 小游戏基础库(130MB) + Cavnas(70MB) + 编译内存(300MB) + UnityHeap + Gfx显存 + 音频 + JavaScript(通常&lt;100MB)。</p><p>假如游戏需要支持低档机型，将内存控制到1G以内，业务侧(UnityHeap, Gfx显存，音频，JavaScript)需控制在500MB左右。我们此处给出转换游戏中最容易遇到的内存问题与解决方案，如果开发者遇到内存问题时请逐个排查优化。</p><h3 id="_4-1-wasm代码编译内存" tabindex="-1">4.1 WASM代码编译内存 <a class="header-anchor" href="#_4-1-wasm代码编译内存" aria-label="Permalink to &quot;4.1 WASM代码编译内存&quot;">​</a></h3><ul><li>问题原因：Unity WebGL将所有代码(引擎、业务代码、第三方插件)编译为跨平台的WebAssembly二进制代码，运行时需进行编译执行。编译所占用内存占用非常大（如在iOS系统，30MB未压缩代码需300MB运行时编译内存）。</li><li>解决办法： <ul><li><ol><li><a href="./WasmSplit.html">使用代码分包工具</a>能降低原编译代码内存50%以上。</li></ol></li><li><ol start="2"><li>手动删除多余插件，减少不必要的Unity模块引入(如物理、Unity数据统计等)</li></ol></li></ul></li></ul><h3 id="_4-2-gpu内存" tabindex="-1">4.2 GPU内存 <a class="header-anchor" href="#_4-2-gpu内存" aria-label="Permalink to &quot;4.2 GPU内存&quot;">​</a></h3><ul><li>问题原因：Unity 2021才开始支持移动平台的压缩纹理，使用RGBA、DXT等纹理格式将导致巨大的内存开销与运行时解压消耗。</li><li>解决办法： <ul><li><ol><li><a href="./CompressedTexture.html">压缩纹理优化</a>能最大程度地减少内存与解压开销。</li></ol></li><li><ol start="2"><li>升级引擎至2021使用ASTC压缩纹理</li></ol></li><li><ol start="3"><li>关闭HDR，标准渲染管线在&quot;GraphicsSetting-tier2&quot;（WebGL使用tier2）取消勾选&quot;Use HDR&quot;;URP管线通过renderer配置取消</li></ol></li><li><ol start="4"><li>使用<a href="https://developers.weixin.qq.com/minigame/dev/guide/performance/perf-high-performance-plus.html" target="_blank" rel="noreferrer">高性能+模式</a>将显著降低GPU内存</li></ol></li></ul></li></ul><h3 id="_4-3-unityheap" tabindex="-1">4.3 UnityHeap <a class="header-anchor" href="#_4-3-unityheap" aria-label="Permalink to &quot;4.3 UnityHeap&quot;">​</a></h3><ul><li>问题原因：UnityHeap是用于存储所有状态、托管的对象和本机对象，往往由于场景过大或由于业务原因造成瞬间内存峰值。<em><strong>由于Unity WebGL在单首帧内无法GC</strong></em>，单帧内瞬间的内存使用非常容易造成crash。同时，<em><strong>Heap是只增不减且存在内存碎片的。</strong></em></li><li>解决办法: <ul><li><ol><li>转换面板设置合理的“UnityHeap预留内存”，切忌超出使用</li></ol></li><li><ol start="2"><li>避免场景过大导致瞬间峰值</li></ol></li><li><ol start="3"><li>避免过大的AssetBundle导致瞬间峰值</li></ol></li><li><ol start="4"><li>避免单帧内分配过多的对象, <em><strong>切忌产生跳跃峰值</strong></em></li></ol></li></ul></li><li>如何设置“UnityHeap预留内存”？该值仅表示UnityHeap的峰值进行预留，避免内存不足时导致扩容产生的尖刺； <ul><li><ol><li>导出面板勾选“显示性能面板”或unity-namespace.js中enableProfileStats变量打开性能面板</li></ol></li><li><ol start="2"><li>将游戏运行一段时间，观察DynamicMemory的峰值</li></ol></li><li><ol start="3"><li>UnityHeap=DynamicMemory+少量静态内存(通常&lt;10MB)，因此转换面板的“UnityHeap预留内存”设置为略大于DynamicMemory峰值(可多预留50-100MB，以实际游戏为准)。建议值：超休闲游戏256,中度游戏(模拟经营、卡牌成长)496，重度游戏(SLG,MMO)768。</li></ol></li><li><ol start="4"><li>UnityHeap不宜过大，当UnityHeap&gt;=1024MB时，大部分设备将启动失败；UnityHeap&gt;=500MB时，32位微信(约5%用户)与iOS普通模式大概率启动失败，建议中轻度游戏不超过该值。</li></ol></li></ul></li></ul><h3 id="_4-4-首资源包与assetbundle内存" tabindex="-1">4.4 首资源包与AssetBundle内存 <a class="header-anchor" href="#_4-4-首资源包与assetbundle内存" aria-label="Permalink to &quot;4.4 首资源包与AssetBundle内存&quot;">​</a></h3><ul><li>问题原因：首资源包永远占用内存且无法释放；首资源包和AssetBundle自带的cache机制都会使用Emscripten使用<a href="https://emscripten.org/docs/api_reference/Filesystem-API.html" target="_blank" rel="noreferrer">文件系统</a>，应避免使用。</li><li>解决办法： <ul><li><ol><li>减少首资源包大小，此部分始终占用内存无法释放, 使用AssetBundle；</li></ol></li><li><ol start="2"><li>AssetBundle按需加载，及时释放以节省内存；</li></ol></li><li><ol start="3"><li>AssetBundle使用时被解压占用Unity Native内存，应减少AssetBundle大小；</li></ol></li><li><ol start="4"><li>避免使用Unity自带的文件缓存机制， <em><strong>首资源包和AssetBundle都不应使用文件Cache</strong></em>；</li></ol></li></ul></li></ul><h3 id="_4-5-音频内存" tabindex="-1">4.5 音频内存 <a class="header-anchor" href="#_4-5-音频内存" aria-label="Permalink to &quot;4.5 音频内存&quot;">​</a></h3><ul><li>问题原因：音频将占用小游戏环境的内存</li><li>解决办法： <ul><li><ol><li>不要使用fmod播放长音频，如游戏BGM</li></ol></li><li><ol start="2"><li>控制音效数量，同时存在的音频数不应该超过20个</li></ol></li><li><ol start="3"><li>尽量强制使用单声道音频，双声道会产生2倍内存消耗</li></ol></li></ul></li></ul><h3 id="_4-6-其他常见优化手段" tabindex="-1">4.6 其他常见优化手段 <a class="header-anchor" href="#_4-6-其他常见优化手段" aria-label="Permalink to &quot;4.6 其他常见优化手段&quot;">​</a></h3><ul><li><a href="https://blog.uwa4d.com/archives/optimzation_memory_1.html" target="_blank" rel="noreferrer">性能优化，进无止境-内存篇（上）</a></li><li><a href="https://blog.uwa4d.com/archives/optimzation_memory_2.html" target="_blank" rel="noreferrer">性能优化，进无止境-内存篇（下）</a></li></ul><h2 id="五、qa" tabindex="-1">五、QA <a class="header-anchor" href="#五、qa" aria-label="Permalink to &quot;五、QA&quot;">​</a></h2><ol><li><p>Q: 如何解决iOS高性能模式出现内存过大导致游戏关闭，常见优化步骤如何？</p><ul><li>iOS测试内存务必不要开启development、profilingmem等模式</li><li>iOS测试内存务必使用代码分包、压缩纹理（2021以上可使用引擎ASTC，低版本使用微信压缩纹理）</li><li>请使用Perfdog或mac Instrument查看WebContent进程内存是否在安全范围(安全内存峰值是1.2-1.3G左右)</li><li>进程内存离1.5G上限还有较大差距就突然崩溃，请检查“UnityHeap预留内存“是否足够</li><li>打开性能面板查看DynamicMemory，峰值不要超过500M（结合profilingmem、memoryprofiler分析）</li><li>使用Perfdog查看Android版本的GL、GFX显存，对于GPU显存压力大的游戏，使用<a href="https://developers.weixin.qq.com/minigame/dev/guide/performance/perf-high-performance-plus.html" target="_blank" rel="noreferrer">高性能+模式</a></li><li>如果以上步骤完成还有问题，请提供详细数据联系平台侧进一步分析</li></ul></li><li><p>Q: 在Unity Profiler看到内存才200MB+，是否代表游戏内存无问题</p><ul><li>不是。游戏占用内存必须以真机环境为准，使用Perfdog（Android or iOS）或 Instruments in Xcode(iOS)测试对应进程的内存占用。</li><li>Unity Profiler仅能看到“引擎可监控内存”，并不包含小游戏公共库、Cavas、WebAssembly编译以及容器其他内存。</li><li>建议使用2022或团结版的memoryprofiler、profiling-mem更精确分析内存，对于分析CPU/GPU内存有较大帮助</li></ul></li><li><p>Q: 转换面板设置内存值多少合适？</p><ul><li>请看前文关于UnityHeap预留内存的说明</li></ul></li></ol>',61);function g(b,_,U,P,M,q){return t(),a("div",null,[c,l(" Unity WebGL是以WebAssembly+WebGL技术为基础的应用，运行在浏览器环境，因此游戏内存的分配也是完全托管在这个环境中。 "),f])}const x=e(y,[["render",g]]);export{A as __pageData,x as default};
