import{_ as e,c as n,a as s,a4 as a,m as i,o as t}from"./chunks/framework.Br2U662V.js";const l="/minigame-unity-webgl-transform/assets/debugexception4.DSUeoQnT.png",p="/minigame-unity-webgl-transform/assets/debugexception5.CVudNa9e.png",o="/minigame-unity-webgl-transform/assets/debugexception1.BCEW4Vpv.png",h="/minigame-unity-webgl-transform/assets/debugexception9.W-PbBU-g.png",r="/minigame-unity-webgl-transform/assets/debugexception8.c2_HLQJn.png",g="/minigame-unity-webgl-transform/assets/debugexception7.DPXuZd9S.png",c="/minigame-unity-webgl-transform/assets/debugexception6.B1QYPPoJ.png",d="/minigame-unity-webgl-transform/assets/debugexception3.BbzACAPG.png",k="/minigame-unity-webgl-transform/assets/debugexception2.DcBQavmG.png",P=JSON.parse('{"title":"错误调试与异常排查","description":"","frontmatter":{},"headers":[],"relativePath":"Design/DebugAndException.md","filePath":"Design/DebugAndException.md"}'),u={name:"Design/DebugAndException.md"},m=a('<h1 id="错误调试与异常排查" tabindex="-1">错误调试与异常排查 <a class="header-anchor" href="#错误调试与异常排查" aria-label="Permalink to &quot;错误调试与异常排查&quot;">​</a></h1><p>本文阐述开发者在遇到转换后的游戏在开发者工具或真机遇到异常时，如何找到对应堆栈并解决问题。</p><h2 id="如何排查程序中出现的异常" tabindex="-1">如何排查程序中出现的异常 <a class="header-anchor" href="#如何排查程序中出现的异常" aria-label="Permalink to &quot;如何排查程序中出现的异常&quot;">​</a></h2><h3 id="如何查看日志" tabindex="-1">如何查看日志 <a class="header-anchor" href="#如何查看日志" aria-label="Permalink to &quot;如何查看日志&quot;">​</a></h3><p>小游戏出现异常或错误时，通过以下方式打开 console：</p><ul><li><p>开发者工具：调试器-&gt;Console</p></li><li><p>真机：</p><p>步骤1(打开调试模式)：右上角菜单-&gt;打开调试-&gt;出现vconsole 或者 game.js增加代码&quot;wx.setEnableDebug({enableDebug: true})&quot;</p><p>步骤2(打开vconsole)：点击vconsole打开日志面板（启动阶段点三次封面视频下方Unity Logo出现 vconsole)</p></li></ul><img src="'+l+'" width="800"><p><em><strong>注意：在WASM代码分包情况下，应该使用jxxx的数字作为函数id</strong></em></p><p>默认情况下，函数堆栈是不可读的函数id，那么可通过以下两种方法之一来获得可读函数名</p><h3 id="如何通过错误堆栈查找源代码问题" tabindex="-1">如何通过错误堆栈查找源代码问题 <a class="header-anchor" href="#如何通过错误堆栈查找源代码问题" aria-label="Permalink to &quot;如何通过错误堆栈查找源代码问题&quot;">​</a></h3><h4 id="使用profiling-funcs" tabindex="-1">使用Profiling-funcs <a class="header-anchor" href="#使用profiling-funcs" aria-label="Permalink to &quot;使用Profiling-funcs&quot;">​</a></h4><p>转换面板勾选profiling-funcs, 导出的代码包中将包含可读函数名。 正式上线版本请务必关闭profiling-funcs，或使用代码分包(可自动剔除函数名）。</p><h4 id="使用symbols文件可读函数名" tabindex="-1">使用symbols文件可读函数名 <a class="header-anchor" href="#使用symbols文件可读函数名" aria-label="Permalink to &quot;使用symbols文件可读函数名&quot;">​</a></h4><p>以文本方式打开导出目录/webgl/Build/xxx.symbols 文件</p><img src="'+p+'" width="800">',15),b=a('<p>这里有个<a href="./Symbol.html">小工具</a>可以帮助替换日志(在WASM代码分包情况下，需要自行稍做修改)</p><h2 id="影响异常错误的导出选项" tabindex="-1">影响异常错误的导出选项 <a class="header-anchor" href="#影响异常错误的导出选项" aria-label="Permalink to &quot;影响异常错误的导出选项&quot;">​</a></h2><p>推荐配置(转换插件默认设置)</p><ul><li>Enable Exceptions: Explicitly Thrown Exceptions Only</li><li>Debug Symbols: Yes</li><li>Development Build: No</li></ul><h3 id="enable-exceptions" tabindex="-1">Enable Exceptions <a class="header-anchor" href="#enable-exceptions" aria-label="Permalink to &quot;Enable Exceptions&quot;">​</a></h3><p>BuildSettings-&gt;Player Settings-&gt;Publish Settings-&gt;Enable Exceptions 选项表示 Unity 引擎捕捉哪种级别的异常 <img src="'+o+`" width="800"></p><p><strong>什么是异常级别？ 简单来说，就是确定哪些异常由引擎捕捉，未被捕捉的异常将抛给 WASM 虚拟机，最终会导致 VM 结束。</strong></p><p>以代码为例</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 程序捕捉异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            GameObject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(go.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 程序未捕捉异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        GameObject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> go2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(go2.name);</span></span></code></pre></div><p>这段代码有两处异常： 1. 程序捕捉的异常， 2.程序未捕捉异常(通常是问题所在)</p><p><strong>None</strong>：</p><p>异常捕捉：不捕捉任何异常，引擎或业务代码导致的异常都会抛出到 WASM，并导致程序 Crash。 该选项性能最高，但必须保证游戏不使用任何异常，<strong>try catch 也无法捕捉任何异常</strong>。从下图看到程序在第 1 个 Exception 产生时已终止，代码是无法 catch 该异常的。</p><p>异常信息：取决于虚拟机，在开发者工具有出现详细堆栈函数 ID，在真机环境则无。 <img src="`+h+'"></p><p><strong>Explicitly Thrown Exceptions Only</strong>：</p><p>异常捕捉： 游戏代码的异常将被捕捉，如果非致命异常(不在关键路径上)，逻辑代码可以继续。try catch 有效。</p><p>异常信息：Debug.Log 等函数等与程序未捕捉异常可输出简要的异常信息，无堆栈信息。 <img src="'+r+'"></p><p><strong>Full Without Stacktrace</strong>：</p><p>异常捕捉： 同&quot;Explicitly Thrown Exceptions Only&quot;, 且引擎还会增加额外的底层异常检查，比如”Null References Out of Bounds Array accesses“。</p><p>异常信息： Debug.Log 等函数与程序未捕捉异常都只有输出简要的异常信息，无堆栈信息。 <img src="'+g+'"></p><p><strong>Full With Stacktrace</strong>：</p><p>异常捕捉： 同&quot;Full Without Stacktrace&quot;</p><p>异常信息： Debug.Log 等函数得到完整的堆栈，程序未捕捉异常有最浅层堆栈函数名。 <img src="'+c+'"></p><p>注意：</p><blockquote><p>None 性能最高，但此模式必须保证游戏代码(包括第三方插件)不使用异常，一旦命中异常即使 catch 也无效，会直接导致程序终止。Explicitly Thrown Exceptions Only 是几种选择中鲁棒性和信息提示较为均衡的，推荐发布使用。Full With Stacktrace 会严重影响性能，切忌在发布版本中使用。</p></blockquote><h3 id="debug-symbols" tabindex="-1">Debug Symbols <a class="header-anchor" href="#debug-symbols" aria-label="Permalink to &quot;Debug Symbols&quot;">​</a></h3><p>BuildSettings-&gt;Player Settings-&gt;Publish Settings-&gt;DebugSymbols</p><img src="'+d+'" width="800">',27),E=i("h3",{id:"development-build",tabindex:"-1"},[s("Development Build "),i("a",{class:"header-anchor",href:"#development-build","aria-label":'Permalink to "Development Build"'},"​")],-1),y=i("img",{src:k,width:"800"},null,-1);function _(x,f,D,F,S,B){return t(),n("div",null,[m,s(" 通过日志的函数id找到对应的原始函数名，分析调用堆栈。 "),b,s(" Debug Symbols将产生函数id与函数名之间的映射关系，使用文本方式打开即可。 通常我们从异常log中找到函数id，此时可通过该文件找到C#源代码中的函数名。 "),E,y,s(' Development Build会在异常产生时直接附带完整的函数名，与"Full With Stacktrace"类似，且程序未捕捉异常也有详细堆栈。该选项产生的代码体积较大，且对性能有较大影响。 ')])}const q=e(u,[["render",_]]);export{P as __pageData,q as default};
