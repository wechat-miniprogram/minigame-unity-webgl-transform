import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.Br2U662V.js";const r="/minigame-unity-webgl-transform/assets/launch1.eXb8FuyH.png",o="/minigame-unity-webgl-transform/assets/launch.DesekVa-.png",f=JSON.parse('{"title":"小游戏启动流程与时序","description":"","frontmatter":{},"headers":[],"relativePath":"Design/Startup.md","filePath":"Design/Startup.md"}'),n={name:"Design/Startup.md"},s=i('<h1 id="小游戏启动流程与时序" tabindex="-1">小游戏启动流程与时序 <a class="header-anchor" href="#小游戏启动流程与时序" aria-label="Permalink to &quot;小游戏启动流程与时序&quot;">​</a></h1><h2 id="启动加载时序" tabindex="-1">启动加载时序 <a class="header-anchor" href="#启动加载时序" aria-label="Permalink to &quot;启动加载时序&quot;">​</a></h2><p>Unity WebGL转换的小游戏主要依靠Unity Loader进行初始化，典型的流程如下图所示： <img src="'+r+'"></p><h2 id="unity-loader工作流程" tabindex="-1">Unity Loader工作流程 <a class="header-anchor" href="#unity-loader工作流程" aria-label="Permalink to &quot;Unity Loader工作流程&quot;">​</a></h2><img src="'+o+'"><p>关键过程：</p><ol><li>启动准备阶段有两个处理分支：资源与代码分包处理，两者并行。</li><li>资源(data)处理：下载、解压并保持在内存，资源包括：构建场景及依赖、Resource目录所有资源、Unity默认内建资源</li><li>代码分包(wasm.code.br)处理：下载代码分包，解压到内存、编译与实例化</li><li>完成准备阶段后进入Unity引擎初始化与首场景加载</li></ol><h2 id="qa" tabindex="-1">QA: <a class="header-anchor" href="#qa" aria-label="Permalink to &quot;QA:&quot;">​</a></h2><ol><li><p>有哪些文件需要放CDN服务器？ 首资源包：webgl/ProjectName.data.unityweb.bin.txt 资源分包：Adressable/AssetsBundle生成的文件</p></li><li><p>资源(data)或资源包是否需每次下载？ 为加快二次启动，默认loader再次启动时资源(首包资源或资源分包)将直接使用本地缓存。如需手动删除缓存可在真机中小游戏下拉历史栏将小游戏删除。</p></li></ol>',9),l=[s];function d(c,_,h,p,u,m){return t(),e("div",null,l)}const g=a(n,[["render",d]]);export{f as __pageData,g as default};
